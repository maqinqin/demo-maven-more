GooFlow.prototype={
	useSVG:"",
	lineColor: "#0000f0",

	getSvgMarker:function(id,color){
		var m=document.createElementNS("http://www.w3.org/2000/svg","marker");
		m.setAttribute("id",id);
		m.setAttribute("viewBox","0 0 6 6");
		m.setAttribute("refX",5);
		m.setAttribute("refY",3);
		m.setAttribute("markerUnits","strokeWidth");
		m.setAttribute("markerWidth",6);
		m.setAttribute("markerHeight",6);
		m.setAttribute("orient","auto");
		var path=document.createElementNS("http://www.w3.org/2000/svg","path");
		path.setAttribute("d","M 0 0 L 6 3 L 0 6 z");
		path.setAttribute("fill",color);
		path.setAttribute("stroke-width",0);
		m.appendChild(path);
		return m;
	},
	initDraw:function(id,width,height){
		var elem;
		if(GooFlow.prototype.useSVG!=""){
			this.$draw=document.createElementNS("http://www.w3.org/2000/svg","svg");//可创建带有指定命名空间的元素节点
			this.$workArea.prepend(this.$draw);
			var defs=document.createElementNS("http://www.w3.org/2000/svg","defs");//libin创建defs 添加maker，<line>并没有箭头，可以通过<marker>进行扩展
			this.$draw.appendChild(defs);
			defs.appendChild(GooFlow.prototype.getSvgMarker("arrow1",GooFlow.prototype.color.line||"#7281ba"));
			defs.appendChild(GooFlow.prototype.getSvgMarker("arrow2",GooFlow.prototype.color.lineMarked||"#ff3300"));
			defs.appendChild(GooFlow.prototype.getSvgMarker("arrow2_1",GooFlow.prototype.color.lineMarked));
			defs.appendChild(GooFlow.prototype.getSvgMarker("arrow3",GooFlow.prototype.color.lineMarked));
			defs.appendChild(GooFlow.prototype.getSvgMarker("arrow3_1", GooFlow.prototype.color.lineMarked));
			defs.appendChild(GooFlow.prototype.getSvgMarker("arrow_lineSuccess", GooFlow.prototype.color.lineSuccess));
		}
		else{
			this.$draw = document.createElement("v:group");
			if(this.$title == "designer") {
				width = width*3;
				height = height*3;
			}
			this.$draw.coordsize = width+","+height;
			this.$workArea.prepend("<div class='GooFlow_work_vml' style='position:relative;width:"+width+"px;height:"+height+"px'></div>");
			this.$workArea.children("div")[0].insertBefore(this.$draw,null);
		}
		this.$draw.id = id;
		this.$draw.style.width = width + "px";
		this.$draw.style.height = height+ "px";
		//绑定连线的点击选中以及双击编辑事件
		var tmpClk=null;
		if(GooFlow.prototype.useSVG!="")  tmpClk="g";
		else  tmpClk="PolyLine";
		if(!this.$editable)	return;
		
		$(this.$draw).delegate(tmpClk,"click",{inthis:this},function(e){
			e.data.inthis.focusItem(this.id,true);
		});
		var tempOldTxt;
		$(this.$draw).delegate(tmpClk,"dblclick",{inthis:this},function(e){
//			debugger;
			var oldTxt,x,y,from,to;
			var This=e.data.inthis;
			if(GooFlow.prototype.useSVG!=""){
				oldTxt=this.childNodes[2].textContent;
				from=this.getAttribute("from").split(",");
				to=this.getAttribute("to").split(",");
			}else{
				oldTxt=this.childNodes[1].innerHTML;
				var n=this.getAttribute("fromTo").split(",");
				from=[n[0],n[1]];
				to=[n[2],n[3]];
			}
			if(This.$lineData[this.id].type=="lr"){
				from[0]=This.$lineData[this.id].M*This.$scale;
				to[0]=from[0];
			}
			else if(This.$lineData[this.id].type=="tb"){
				from[1]=This.$lineData[this.id].M*This.$scale;
				to[1]=from[1];
			}
			tempOldTxt = oldTxt;
			x=(parseInt(from[0],10)+parseInt(to[0],10))/2-_left;
			y=(parseInt(from[1],10)+parseInt(to[1],10))/2-_top;
			var t=getElCoordinate(This.$workArea[0]);
			This.$textArea.val(oldTxt).css({display:"block",width:120,height:14,
				left:t.left+x-This.$workArea[0].parentNode.scrollLeft,
				top:t.top+y-This.$workArea[0].parentNode.scrollTop}).data("id",This.$focus).focus();
			This.$workArea.parent().one("mousedown",function(e){
				if(e.button==2)return false;
				This.setName(This.$textArea.data("id"),This.$textArea.val(),"line");
				This.$textArea.val("").removeData("id").hide();
			});
		});
	},
	initGroup:function(width,height){
		this.$group=$("<div class='GooFlow_work_group' style='width:"+width+"px;height:"+height+"px'></div>");//存放背景区域的容器
		this.$workArea.prepend(this.$group);
		if(!this.$editable)	return;
	  //区域划分框操作区的事件绑定
	  this.$group.on("mousedown",{inthis:this},function(e){//绑定RESIZE功能以及移动功能
		if(e.button==2)return false;
		var This=e.data.inthis;
		if(This.$nowType!="group")	return;
		if(!e)e=window.event;
		var cursor=$(e.target).css("cursor");
		var id=e.target.parentNode;
		switch(cursor){
			case "nw-resize":id=id.parentNode;break;
			case "w-resize":id=id.parentNode;break;
			case "n-resize":id=id.parentNode;break;
			case "move":break;
			default:return;
		}
		id=id.id;
		var hack=1;
		if(navigator.userAgent.indexOf("8.0")!=-1)	hack=0;
		var ev=mousePosition(e),t=getElCoordinate(This.$workArea[0]);

		var X,Y;
		X=ev.x-t.left+This.$workArea[0].parentNode.scrollLeft;
		Y=ev.y-t.top+This.$workArea[0].parentNode.scrollTop;
		if(cursor!="move"){
			This.$ghost.css({display:"block",
				width:This.$areaData[id].width*This.$scale-2+"px", height:This.$areaData[id].height*This.$scale-2+"px",
				top:This.$areaData[id].top*This.$scale+t.top-This.$workArea[0].parentNode.scrollTop+"px",
				left:This.$areaData[id].left*This.$scale+t.left-This.$workArea[0].parentNode.scrollLeft+hack+"px",
				cursor:cursor});
			var vX=(This.$areaData[id].left*This.$scale+This.$areaData[id].width*This.$scale)-X;
			var vY=(This.$areaData[id].top*This.$scale+This.$areaData[id].height*This.$scale)-Y;
		}
		else{
			var vX=X-This.$areaData[id].left*This.$scale;
			var vY=Y-This.$areaData[id].top*This.$scale;
		}
		var isMove=false;
		This.$ghost.css("cursor",cursor);
		document.onmousemove=function(e){
			if(!e)e=window.event;
			var ev=mousePosition(e);
			if(cursor!="move"){
				X=ev.x-t.left+This.$workArea[0].parentNode.scrollLeft-This.$areaData[id].left*This.$scale+vX;
				Y=ev.y-t.top+This.$workArea[0].parentNode.scrollTop-This.$areaData[id].top*This.$scale+vY;
				if(X<200*This.$scale)	X=200*This.$scale;
				if(Y<100*This.$scale)	Y=100*This.$scale;
				switch(cursor){
					case "nw-resize":This.$ghost.css({width:X+"px",height:Y+"px"});break;
					case "w-resize":This.$ghost.css({width:X+"px"});break;
					case "n-resize":This.$ghost.css({height:Y+"px"});break;
				}
			} else {
				debugger
				if(This.$ghost.css("display")=="none"){
					This.$ghost.css({display:"block",
						width:This.$areaData[id].width*This.$scale+"px", height:This.$areaData[id].height*This.$scale+"px",
						top:This.$areaData[id].top*This.$scale+t.top-This.$workArea[0].parentNode.scrollTop+"px",
						left:This.$areaData[id].left*This.$scale+t.left-This.$workArea[0].parentNode.scrollLeft+"px",cursor:cursor});
				}
				X=ev.x-vX;Y=ev.y-vY;
				if(X<t.left-This.$workArea[0].parentNode.scrollLeft)
					X=t.left-This.$workArea[0].parentNode.scrollLeft;
				else if(X+This.$workArea[0].parentNode.scrollLeft+This.$areaData[id].width*This.$scale>t.left+This.$workArea.width())
					X=t.left+This.$workArea.width()-This.$workArea[0].parentNode.scrollLeft-This.$areaData[id].width*This.$scale;
				if(Y<t.top-This.$workArea[0].parentNode.scrollTop)
					Y=t.top-This.$workArea[0].parentNode.scrollTop;
				else if(Y+This.$workArea[0].parentNode.scrollTop+This.$areaData[id].height*This.$scale>t.top+This.$workArea.height())
					Y=t.top+This.$workArea.height()-This.$workArea[0].parentNode.scrollTop-This.$areaData[id].height*This.$scale;
				This.$ghost.css({left:X+hack+"px",top:Y+hack+"px"});
			}
			isMove=true;
		}
		document.onmouseup=function(e){

			This.$ghost.empty().hide();
			document.onmousemove=null;
			document.onmouseup=null;
			if(!isMove)return;
			if(cursor!="move")
				This.resizeArea(id,This.$ghost.outerWidth()/This.$scale,This.$ghost.outerHeight()/This.$scale);
			else
				This.moveArea(id,(X+This.$workArea[0].parentNode.scrollLeft-t.left)/This.$scale, (Y+This.$workArea[0].parentNode.scrollTop-t.top)/This.$scale);
			return false;
	  	}
	  });
	  //绑定修改文字说明功能
	  this.$group.on("dblclick",{inthis:this},function(e){
		var This=e.data.inthis;
		if(This.$nowType!="group")	return;
		if(!e)e=window.event;
		if(e.target.tagName!="LABEL")	return false;
		var oldTxt=e.target.innerHTML;
		var p=e.target.parentNode;
		var x=parseInt(p.style.left,10)+18,y=parseInt(p.style.top,10)+1;
		var t=getElCoordinate(This.$workArea[0]);
		This.$textArea.val(oldTxt).css({display:"block",width:100,height:14,
			left:t.left+x-This.$workArea[0].parentNode.scrollLeft,
			top:t.top+y-This.$workArea[0].parentNode.scrollTop}).data("id",p.id).focus();
		This.$workArea.parent().one("mousedown",function(e){
			if(e.button==2)return false;
			if(This.$textArea.css("display")=="block"){
				This.setName(This.$textArea.data("id"),This.$textArea.val(),"area");
				This.$textArea.val("").removeData("id").hide();
			}
		});
		return false;
	});
	//绑定点击事件
	this.$group.mouseup({inthis:this},function(e){
	  
		var This=e.data.inthis;
		if(This.$textArea.css("display")=="block"){
			This.setName(This.$textArea.data("id"),This.$textArea.val(),"area");
			This.$textArea.val("").removeData("id").hide();
			return false;
		};
		
		if(This.$nowType!="group")	return;
		if(!e)e=window.event;
		switch($(e.target).attr("class")){
			case "rs_close":	This.delArea(e.target.parentNode.parentNode.id);return false;//删除该分组区域
			case "bg":	return;
		}
		switch(e.target.tagName){
			case "LABEL":	return false;
			case "I"://绑定变色功能
			var id=e.target.parentNode.id;
			switch(This.$areaData[id].color){
				case "red":	This.setAreaColor(id,"yellow");break;
				case "yellow":	This.setAreaColor(id,"blue");break;
				case "blue":	This.setAreaColor(id,"green");break;
				case "green":	This.setAreaColor(id,"red");break;
			}
			return false;
		}
		if(e.data.inthis.$ghost.css("display")=="none"){
			var X,Y;
			var ev=mousePosition(e),t=getElCoordinate(this);
			X=ev.x-t.left+this.parentNode.parentNode.scrollLeft-1;
			Y=ev.y-t.top+this.parentNode.parentNode.scrollTop-1;
			var color=["red","yellow","blue","green"];
			e.data.inthis.addArea(e.data.inthis.$id+"_area_"+e.data.inthis.$max,
					{name:"area_"+e.data.inthis.$max,left:X/This.$scale,top:Y/This.$scale,color:color[e.data.inthis.$max%4],width:200,height:100});
			e.data.inthis.$max++;
			return false;
		}
	  });
	},
	//加入手动扩展编辑区功能，一次扩展200px
	initExpendFunc:function(){
	    this.$workArea.append('<div class="Gooflow_extend_right"></div><div class="Gooflow_extend_bottom"></div>');
	    this.$workArea.children(".Gooflow_extend_right").on("click",{inthis:this},function(e){
			var This=e.data.inthis;
			var w = This.$workArea.width()+This.$workExtendStep;
			var h = This.$workArea.height();
			This.$workArea.css({width:w+"px"});
			if(GooFlow.prototype.useSVG==""){
				This.$draw.coordsize = w+","+h;
			}
			This.$draw.style.width = w + "px";
			if(This.$group!=null){
				This.$group.css({width:w+"px"});
			}
			var parentDiv = This.$workArea.parent()[0];
			parentDiv.scrollLeft = parentDiv.scrollWidth;
			return false;
	    });
	    this.$workArea.children(".Gooflow_extend_bottom").on("click",{inthis:this},function(e){
			var This=e.data.inthis
			var w = This.$workArea.width();
			var h = This.$workArea.height()+This.$workExtendStep;
			This.$workArea.css({height:h+"px"});
			if(GooFlow.prototype.useSVG==""){
				This.$draw.coordsize = w+","+h;
			}
			This.$draw.style.height = h + "px";
			if(This.$group!=null){
				This.$group.css({height:h+"px"});
			}
			var parentDiv = This.$workArea.parent()[0];
			parentDiv.scrollTop = parentDiv.scrollHeight;
			return false;
	    });
	},
	//初始化用来改变连线的连接端点的两个小方块的操作事件
	initLinePointsChg:function(){
		this.$mpFrom.on("mousedown",{inthis:this},function(e){
			var This=e.data.inthis;
			This.switchToolBtn("cursor");
			var ps=This.$mpFrom.data("p").split(",");
			var pe=This.$mpTo.data("p").split(",");
			$(this).hide();
			This.$workArea.data("lineEnd",{"x":pe[0],"y":pe[1],"id":This.$lineData[This.$lineOper.data("tid")].to}).css("cursor","crosshair");
			var line=GooFlow.prototype.drawLine("GooFlow_tmp_line",[ps[0],ps[1]],[pe[0],pe[1]],true,true);
			This.$draw.appendChild(line);
			return false;
	  });
		this.$mpTo.on("mousedown",{inthis:this},function(e){
			var This=e.data.inthis;
			This.switchToolBtn("cursor");
			var ps=This.$mpFrom.data("p").split(",");
			var pe=This.$mpTo.data("p").split(",");
			$(this).hide();
			This.$workArea.data("lineStart",{"x":ps[0],"y":ps[1],"id":This.$lineData[This.$lineOper.data("tid")].from}).css("cursor","crosshair");
			var line=GooFlow.prototype.drawLine("GooFlow_tmp_line",[ps[0],ps[1]],[pe[0],pe[1]],true,true);
			This.$draw.appendChild(line);
			return false;
	  });
	},
	//每一种类型结点及其按钮的说明文字
	setNodeRemarks:function(remark){
    if(this.$tool==null)  return;
		this.$tool.children("a").each(function(){
			this.title=remark[$(this).attr("id").split("btn_")[1]];
		});
		this.$nodeRemark=remark;
	},
	
	//切换左边工具栏按钮,传参TYPE表示切换成哪种类型的按钮
	switchToolBtn:function(type){
		this.$tool.children("#"+this.$id+"_btn_"+this.$nowType.split(" ")[0]).attr("class","GooFlow_tool_btn");
		if(this.$nowType=="group"){
			this.$workArea.prepend(this.$group);
			for(var key in this.$areaDom)	this.$areaDom[key].addClass("lock").children("div:eq(1)").css("display","none");
		}
		this.$nowType=type;
		this.$tool.children("#"+this.$id+"_btn_"+type.split(" ")[0]).attr("class","GooFlow_tool_btndown");
		if(this.$nowType=="group"){
			this.blurItem();
			this.$workArea.append(this.$group);
			for(var key in this.$areaDom)	this.$areaDom[key].removeClass("lock").children("div:eq(1)").css("display","");
		}else if(this.$nowType=="direct"){
			this.blurItem();
		}
		if(this.$textArea.css("display")=="none")	this.$textArea.removeData("id").val("").hide();
	},
	//增加一个流程结点,传参为一个JSON,有id,name,top,left,width,height,type(结点类型)等属性
	addNode:function(id,json){
		if(this.onItemAdd!=null&&!this.onItemAdd(id,"node",json))return;
		if(this.$undoStack&&this.$editable){
			this.pushOper("delNode",[id]);
		}
//		debugger;
		
		/**
		 * 设置节点生成的初始化坐标为固定的倍数 by jsm
		 */
		json.left = Math.round(json.left/initUnit) * initUnit;
		json.top = Math.round(json.top/initUnit)  * initUnit;
		
		var mark = json.marked ? " item_mark" : "";
		if(json.type.indexOf(" round")<0){
			if(!json.width||json.width<120)json.width=120;
			if(!json.height||json.height<32)json.height=32;
			if(!json.top||json.top<0)json.top=0;
			if(!json.left||json.left<0)json.left=0;
			var hack=0;
			if(navigator.userAgent.indexOf("8.0")!=-1)	hack=2;
			var addi = "";
			if(this.$title == "instance"){
//				debugger;
				json.state = parseInt(json.state);
				if(typeof(json.state)=='number' && (json.type == "api" || json.type == "scr" || json.type == "cmd" || json.type == "sub-process" )){
					addi = "<img class='position jiao"+json.state+"'/>";
					//
					if(json.state == 0){/** 节点正常结束 */
						addi = "<div class='done d-success anim'><a href='' target='_blank'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' x='0px' y='0px' viewBox='0 0 1000 1000'><g><path id='path' d=' M748.4,325L448,623.1L301.6,477.9c-4.4-4.3-11.4-4.3-15.8,0c-4.4,4.3-4.4,11.3,0,15.6l151.2,150c0.5,1.3,1.4,2.6,2.5,3.7c4.4,4.3,11.4,4.3,15.8,0l308.9-306.5c4.4-4.3,4.4-11.3,0-15.6C759.8,320.7,752.7,320.7,748.4,325z' <='' g=''></path></g></svg></a></div>";
					}if(json.state == 1 || json.state == 7){/** 节点异常结束、节点运行超时 */
						addi = "<div class='done d-danger anim'><a href='' target='_blank'><i class='fa fa-close'></i></a></div>";
					}if(json.state == 6){/** 节点运行超时 */
						addi = "<div class='done d-warning anim'><a href='' target='_blank'><i class='fa fa-close'></i></a></div>";
					}if(json.state == 2 || json.state == 8){/** 节点正常暂停、调度节点为未激活状态*/
						addi = "<div class='done d-success anim'><a href='' target='_blank'><i class='fa fa-pause'></i></a></div>";
					}if(json.state == 3){/** 节点异常暂停状态*/
						addi = "<div class='done d-danger anim'><a href='' target='_blank'><i class='fa fa-pause'></i></a></div>";
					}if(json.state == 4){/** 节点运行中 */
						addi = "<div class='done d-success anim'><a href='' target='_blank'><i class='fa fa-refresh fa-spin'></i></a></div>";
					}
					if(json.state == 5){/** 未运行状态 */
						addi = "";
					}
//					//异常状态
//					if (json.state == 3 || json.state == 1 || json.state == 6 || json.state == 7) {
//						addi = "<div class='done d-danger anim'><a href='' target='_blank'><i class='fa fa-pause'></i></a></div>";
//					} else if (json.state == 0 || json.state == 2 || json.state == 5 || json.state == 8) {
//						addi = "<div class='done d-success anim'><a href='' target='_blank'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' x='0px' y='0px' viewBox='0 0 1000 1000'><g><path id='path' d=' M748.4,325L448,623.1L301.6,477.9c-4.4-4.3-11.4-4.3-15.8,0c-4.4,4.3-4.4,11.3,0,15.6l151.2,150c0.5,1.3,1.4,2.6,2.5,3.7c4.4,4.3,11.4,4.3,15.8,0l308.9-306.5c4.4-4.3,4.4-11.3,0-15.6C759.8,320.7,752.7,320.7,748.4,325z' <='' g=''></path></g></svg></a></div>";
//					} else if (json.state == 4) {
//						//执行状态
//						addi = "<div class='done d-warning anim'><a href='' target='_blank'><i class='fa fa-refresh fa-spin'></i></a></div>";
//					}
				}
			}
			//如果data为空，如默认json.name
			var jsonDisplay = "";
//			debugger;
			if(json.data == "{}" ){
				if(json.type == "start"){
					json.name = "开始";
				}  else if (json.type == "end") {
					json.name = "结束";
				} else if (json.type == "decision") {
					if(json.name.indexOf("node") > -1) {
						json.name = "选择";
					}
				} else if (json.type == "fork") {
					if(json.name.indexOf("node") > -1) {
						json.name = "分支";
					}
				} else if (json.type == "join") {
					if(json.name.indexOf("node") > -1) {
						json.name = "聚合";
					}
				} else if (json.type == "cmd") {
					json.name = "命令";
				} else if (json.type == "task") {
					json.name = "人工任务";
				} else if (json.type == "scr") {
					json.name = "脚本";
				} else if (json.type == "api") {
					json.name = "API";
				}else if (json.type == "sub-process") {
					json.name = "子流程";
				}
			}
			var jsonName = json.name;
			/*var jsonTypeFontColor=""; 
			if(json.type=='start'){
				jsonTypeFontColor = "start-green";
//				jsonDisplay = "block;width:100%";
//				jsonName = '&nbsp;';
//				json.width = 33;
			}else if(json.type=='end'){
				jsonTypeFontColor = "end-yellow";
//				jsonDisplay = "none";
//				json.width = 33;
			}else{
				jsonTypeFontColor = "other-blue";
			}*/
			if(newSizeFlag){
                var newStyle = "width:"+newIcoSize["width"]+";height:"+newIcoSize["height"]+";font-size:"+newIcoSize["font-size"]
                				+";transform:"+newIcoSize["transform"]+";margin:"+newIcoSize["margin"]+";";
				this.$nodeDom[id]=$("<div class='GooFlow_item"+mark+"' name='"+json.name+"' id='"+id+"'nodeType='"
						+json.type+"' style='top:"+(json.top*this.$scale)+"px;left:"+(json.left*this.$scale)+"px' data='"
						+json.data+"' state='"+json.state+"'><table cellspacing='1' style='width:"+(json.width*this.$scale)
						+"px;'><tr>" +
						"<td class='ico'><svg class='t-icon' aria-hidden='true'  " +
						"style='width: "+(32*this.$scale)+"px; height: "+(32*this.$scale)+"px; " +
						"font-size: "+(32*this.$scale)+"px; transform: none; margin: 0px '><use xlink:href='#icon-"+json.type+"'></use></svg></td>" +
						"<td style='transform: none; font-size: "+(12*this.$scale)+"px; margin: 0px; display:"+jsonDisplay+";'>"+jsonName+addi+"</td></tr>" +
						"</table><div style='display:none'><div class='rs_bottom'></div><div class='rs_right'></div>" +
						"<div class='rs_close'></div></div></div>");
			}else{
				this.$nodeDom[id] = $("<div class='GooFlow_item"+mark+"' name='"+json.name+"' id='"+id+"'nodeType='"
								+json.type+"' style='top:"+json.top+"px;left:"+json.left+"px' data='" + json.data+"' " +
								"state='"+json.state+"'>" +
								"<table cellspacing='0' cellspacing='0' style='width:"+(json.width*this.$scale) + "px;'>" +
								"<tr>" +
								"<td class='ico'>" +
									"<svg class='t-icon' aria-hidden='true'  " +
									"style='width: "+(32*this.$scale)+"px; height: "+(32*this.$scale)+"px; " +
									"font-size: "+(32*this.$scale)+"px; transform: none; margin: 0px auto;'>" +
									"<use xlink:href='#icon-"+json.type+"'></use></svg>" +
								"</td>" +
								"<td style='transform: none; font-size: "+(12*this.$scale)+"px; margin: 0px; display:"+jsonDisplay+";'>"
									+jsonName+addi+"</td></tr>" +
								"</table>" +
								"<div style='display:none'><div class='rs_bottom'></div><div class='rs_right'></div>" +
								"<div class='rs_close'></div></div></div>");
				//alert(this.$nodeDom[id].html());
			}
//			debugger;
			var inner = this.$bgDiv.find(".GooFlow_work_inner");
			if(json.left+100>this.$workArea.width()){
				//添加右侧区域
				var w = json.left+200;
				var h = this.$workArea.height();
				this.$workArea.css({width:w+"px"});
				if(GooFlow.prototype.useSVG==""){
					this.$draw.coordsize = w+","+h;
				}
				this.$draw.style.width = w + "px";
				if(this.$group!=null){
					this.$group.css({width:w+"px"});
				}
			}
			
			if(json.top+100>this.$workArea.height()){
				var w = this.$workArea.width();
				var h = json.top+100;
				this.$workArea.css({height:h+"px"});
				if(GooFlow.prototype.useSVG==""){
					this.$draw.coordsize = w+","+h;
				}
				this.$draw.style.height = h + "px";
				if(this.$group!=null){
					this.$group.css({height:h+"px"});
				}
			}
		} else {
			json.width=32;json.height=32;
			this.$nodeDom[id]=$("<div class='GooFlow_item item_round"+mark+"' id='"
					+id+"' style='top:"+json.top*this.$scale+"px;left:"+json.left*this.$scale+"px'>" +
					"<table cellspacing='0' style='width:"+(json.width*this.$scale)+"px;height:"
					+(json.height*this.$scale)+"px;'><tr><td class='ico'><svg class='t-icon' aria-hidden='true'><use xlink:href='#icon-"+json.type+"'></use></svg></td></tr></table>" +
					"<div  style='display:none'><div class='rs_close'></div></div>" +
					"<div class='span' style='transform: none; font-size: 14px; margin: 0px;'>"+json.name+"</div></div>");
		}
		if(GooFlow.prototype.color.node){
			if(json.type.indexOf(" mix")>-1){
				this.$nodeDom[id].css({"background-color":GooFlow.prototype.color.mix,"border-color":GooFlow.prototype.color.mix});
			}else{
				this.$nodeDom[id].css({"background-color":GooFlow.prototype.color.node,"border-color":GooFlow.prototype.color.node});
			}
			if(mark && GooFlow.prototype.color.mark){
				this.$nodeDom[id].css({"border-color":GooFlow.prototype.color.mark});
			}
			//alert(this.$nodeDom[id].prop("outerHTML"));
		}
		if(json.type.indexOf(" mix")>-1){
			this.$nodeDom[id].addClass("item_mix");
		}
		
		var ua=navigator.userAgent.toLowerCase();
		if(ua.indexOf('msie')!=-1 && ua.indexOf('8.0')!=-1)
			this.$nodeDom[id].css("filter","progid:DXImageTransform.Microsoft.Shadow(color=#94AAC2,direction=135,strength=2)");
		this.$workArea.append(this.$nodeDom[id]);
		this.$nodeData[id]=json;
		++this.$nodeCount;
		if(this.$editable){
			this.$nodeData[id].alt=true;
			if(this.$deletedItem[id])	delete this.$deletedItem[id];//在回退删除操作时,去掉该元素的删除记录
		}
//		var widthNode = 0;
//		var heightNode = 0;
//		if(this.$title == "instance") {
//			var widthNode = this.$nodeDom[id].outerWidth();
//			var heightNode = this.$nodeDom[id].outerHeight();
//		}
//		//var widthNode = this.$nodeDom[id].outerWidth();
//		//var heightNode = this.$nodeDom[id].outerHeight();
//		if(this.$maxWidth < json.left){
//			this.$maxWidth = json.left+widthNode;//libin 获取最大节点 16.12.05
//		}
//		if(this.$maxHeight < json.top){
//			this.$maxHeight = json.top+heightNode;
//		}
	},
	initWorkForNode:function(userComponentDiv, userComponentFrame){
		//绑定点击事件，点击画布中的流程节点事件
		this.$workArea.delegate(".GooFlow_item","click",{inthis:this},function(e){
			e.data.inthis.focusItem(this.id,true);
			$(this).removeClass("item_mark");
		});
		//绑定用鼠标移动事件，鼠标点击流程节点的图标
		this.$workArea.delegate(".ico","mousedown",{inthis:this},function(e){
			if(!e)e=window.event;
			if(e.button==2)return false;
			var This=e.data.inthis;
			if(This.$nowType=="direct")	return;
			var Dom=$(this).parents(".GooFlow_item");
			var id=Dom.attr("id");
			This.focusItem(id,true);
			var hack=1;
			if(navigator.userAgent.indexOf("8.0")!=-1)	hack=0;
			var ev=mousePosition(e),t=getElCoordinate(This.$workArea[0]);

			Dom.children("table").clone().prependTo(This.$ghost);
			var X,Y;
			X=ev.x-t.left+This.$workArea[0].parentNode.scrollLeft + scrollBarLeft;
			Y=ev.y-t.top+This.$workArea[0].parentNode.scrollTop + scrollBarTop;
			var vX=X-This.$nodeData[id].left*This.$scale,vY=Y-This.$nodeData[id].top*This.$scale;
			var isMove=false;
			// 移动流程节点事件
			document.onmousemove=function(e){
				if(!e)e=window.event;
				var ev=mousePosition(e);
				if(X==ev.x-vX&&Y==ev.y-vY)	return false;
				X=ev.x-vX;Y=ev.y-vY;
				
				if(isMove && This.$ghost.css("display")=="none") {
					var xPos, yPos;
					xPos = This.$nodeData[id].left*This.$scale+t.left-This.$workArea[0].parentNode.scrollLeft+hack;
					yPos = This.$nodeData[id].top * This.$scale + t.top - This.$workArea[0].parentNode.scrollTop + hack;
					debugger
					This.$ghost.css({
						display:"block",
						width: This.$nodeDom[id].outerWidth() * This.$scale+"px", 
						height:This.$nodeDom[id].outerHeight() * This.$scale+"px",
						top: yPos + "px",
						left: xPos + "px",
						cursor:"move"	
					});
				}
				if(X<t.left-This.$workArea[0].parentNode.scrollLeft)
					X=t.left-This.$workArea[0].parentNode.scrollLeft + scrollBarLeft;
				else if(X+This.$workArea[0].parentNode.scrollLeft+This.$nodeData[id].width*This.$scale>t.left+This.$workArea.width())
					X=t.left+This.$workArea.width()-This.$workArea[0].parentNode.scrollLeft-This.$nodeData[id].width*This.$scale + scrollBarLeft;
				if(Y<t.top-This.$workArea[0].parentNode.scrollTop){
					Y=t.top-This.$workArea[0].parentNode.scrollTop + scrollBarTop;
				} else if(Y+This.$workArea[0].parentNode.scrollTop+This.$nodeData[id].height*This.$scale>t.top+This.$workArea.height()){
					Y=t.top+This.$workArea.height()-This.$workArea[0].parentNode.scrollTop-This.$nodeData[id].height*This.$scale + scrollBarTop;
				}
				
				var xPos, yPos;
				xPos = X + hack - _left;
				xPos = Math.round(xPos / initUnit) * initUnit;
				yPos = Y + hack - _top;
				yPos = Math.round(yPos / initUnit) * initUnit;
				
				This.$ghost.css({
					left: xPos + "px", 
					top : yPos + "px"
				});
				isMove=true;
			}
			// 移动流程节点完成
			document.onmouseup=function(e){
				if(isMove) {
					This.moveNode(id,(X+This.$workArea[0].parentNode.scrollLeft + scrollBarLeft-t.left)/This.$scale,(Y+This.$workArea[0].parentNode.scrollTop-t.top + scrollBarTop)/This.$scale);
				}
				This.$ghost.empty().hide();
				document.onmousemove=null;
				document.onmouseup=null;
			}
		});
		if(!this.$editable)	return;
		//绑定鼠标悬浮在流程节点事件
		this.$workArea.delegate(".GooFlow_item","mouseenter",{inthis:this},function(e){
			// 改变背景色
			$(this).css("background-color", GooFlow.prototype.color.mark);
			if (e.data.inthis.$nowType != "direct" && !document.getElementById("GooFlow_tmp_line")) {
			} else {
				// 如果划线则修改样式
				$(this).addClass("item_mark");
			}
		});
		//绑定鼠标离开流程节点事件
		this.$workArea.delegate(".GooFlow_item","mouseleave",{inthis:this},function(e){
			// 如果当前节点未处于选中状态，则恢复背景色
			if ($(this).children("div:eq(0)").css("display") != 'block') {
				$(this).css("background-color", GooFlow.prototype.color.node);
			}
			if(e.data.inthis.$nowType!="direct"&&!document.getElementById("GooFlow_tmp_line")) {
				
			} else {
				$(this).removeClass("item_mark");
			}
		});
		//绑定连线时确定初始点
		this.$workArea.delegate(".GooFlow_item","mousedown",{inthis:this},function(e){
//			debugger;
			if(e.button==2)return false;
			var This=e.data.inthis;
			if(This.$nowType!="direct")	return;
			var ev=mousePosition(e),t=getElCoordinate(This.$workArea[0]);
			var X,Y;
			X=ev.x-t.left+This.$workArea[0].parentNode.scrollLeft + scrollBarLeft;
			Y=ev.y-t.top+This.$workArea[0].parentNode.scrollTop + scrollBarTop;
			This.$workArea.data("lineStart",{"x":X,"y":Y,"id":this.id}).css("cursor","crosshair");
			var line=GooFlow.prototype.drawLine("GooFlow_tmp_line",[X,Y],[X,Y],true,true);
			This.$draw.appendChild(line);
		});
		//绑定连线时确定结束点
		this.$workArea.delegate(".GooFlow_item","mouseup",{inthis:this},function(e){
//			debugger;
			var This=e.data.inthis;
			if(This.$nowType!="direct"&&!This.$mpTo.data("p"))	return;
			var lineStart=This.$workArea.data("lineStart");
			var lineEnd=This.$workArea.data("lineEnd");
			if(lineStart&&!This.$mpTo.data("p")){
				//This.addLine(This.$id+"_line_"+This.$max,{from:lineStart.id,to:this.id,name:""});  libin修改Id
				This.addLine(This.$max,{from:lineStart.id,to:this.id,name:"",state:false}); //添加线状态
				This.$max++;
			}
			else{
				if(lineStart){
					This.moveLinePoints(This.$focus,lineStart.id,this.id);
				}else if(lineEnd){
					This.moveLinePoints(This.$focus,this.id,lineEnd.id);
				}
				if(!This.$nodeData[this.id].marked){
          $(this).removeClass("item_mark");
          if(this.id!=This.$focus){
            $(this).css("border-color",GooFlow.prototype.color.node);
          }
          else{
            $(this).css("border-color",GooFlow.prototype.color.line);
          }
				}
			}
		});
		//绑定双击编辑事件
		this.$workArea.delegate(".GooFlow_item > .span","dblclick",{inthis:this},function(e){
			var oldTxt=this.innerHTML;
			var This=e.data.inthis;
			var id=this.parentNode.id;
			var t=getElCoordinate(This.$workArea[0]);
			This.$textArea.val(oldTxt).css({display:"block",height:$(this).height(),width:100,
				left:t.left+This.$nodeData[id].left-This.$workArea[0].parentNode.scrollLeft-24,
				top:t.top+This.$nodeData[id].top-This.$workArea[0].parentNode.scrollTop+26})
				.data("id",This.$focus).focus();
			This.$workArea.parent().one("mousedown",function(e){
				if(e.button==2)return false;
				This.setName(This.$textArea.data("id"),This.$textArea.val(),"node");
				This.$textArea.val("").removeData("id").hide();
			});
		});
		switch(this.$title) {
			case "instance":
				this.$workArea.delegate(".ico + td","dblclick",{inthis:this},function(e){
					var oldTxt=this.innerHTML;
					var This=e.data.inthis;
					var id=$(this).parents(".GooFlow_item").attr("id");
					var t=getElCoordinate(This.$workArea[0]);
					This.$textArea.val(oldTxt).css({display:"block",width:$(this).width()+24,height:$(this).height(),
						left:t.left+24+This.$nodeData[id].left-This.$workArea[0].parentNode.scrollLeft,
						top:t.top+2+This.$nodeData[id].top-This.$workArea[0].parentNode.scrollTop})
						.data("id",This.$focus).focus();
					This.$workArea.parent().one("mousedown",function(e){
						if(e.button==2)return false;
						This.setName(This.$textArea.data("id"),This.$textArea.val(),"node");
						This.$textArea.val("").removeData("id").hide();
					});
				});
				break;
			case "designer":
				this.$workArea.delegate(".ico + td","dblclick",{inthis:this},function(e){
				var This=e.data.inthis;
				var type=$(this).parents(".GooFlow_item").attr("nodeType");
				var id =$(this).parents(".GooFlow_item").attr("id");
				var name =$(this).parents(".GooFlow_item").attr("name");
				var data =$(this).parents(".GooFlow_item").attr("data");
				$("#" + userComponentDiv).css({"padding-left": "0px",
					"padding-right": "0px",
					"padding-top": "0px",
					"padding-bottom": "0px",
				});
				var param = '', title = '';
				var width = 900, height = 500;
				switch(type){
					case "start":
						param = ctx+"/pages/tankflow/designer/formPage/globalParamsForm.jsp?state=design&id="+id;
						// $("#" + userComponentDiv).dialog("option", "title", "定义全局参数");
						height = 500
						title = "定义全局参数";
						break;
					case "end":
						break;
					case "decision":
						param = ctx+"/pages/tankflow/designer/formPage/decisionForm.jsp?state=design&id="+id;
						// $("#" + userComponentDiv).dialog("option", "title", "选择路由定义");
						title = "选择路由定义";
						break;
					case "fork":
						param = ctx+"/pages/tankflow/designer/formPage/forkForm.jsp?state=design&id="+id;
						// $("#" + userComponentDiv).dialog("option", "title", "分支路由定义");
						title = "选择路由定义";
						break;
					case "join":
						param = ctx+"/pages/tankflow/designer/formPage/joinForm.jsp?state=design&id="+id;
						title = "聚合路由定义";
						// $("#" + userComponentDiv).dialog("option", "title", "聚合路由定义");
						break;
					default:
						var width,height,page;
						if(type=="task"){
							page="/pages/tankflow/designer/formPage/oaForm.jsp";
							width=400;
							height=360;
						}else if(type=="cmd"){
							page="/pages/tankflow/designer/formPage/commandForm.jsp";
							width=850;
							height=400;
						}else if(type=="scr"){
							page="/pages/tankflow/designer/formPage/scriptForm.jsp";
							width=850;
							height=360;
						}else if(type=="api"){
							page="/pages/tankflow/designer/formPage/apiForm.jsp";
							width=850;
							height=500;
						}else if(type=="sub-process"){
							page="/pages/tankflow/designer/formPage/sub-process.jsp";
							width=850;
							height=300;
						}
						height=500;
						param = ctx+page+"?state=design&tempTypeId="+$("#tempTypeId").val()+"&id="+id+"&templateId="+$('#templateId').val();
						title = name;
				}
				// bind event
				$('#' + userComponentFrame).unbind("load");
				$('#' + userComponentFrame).load(
						function() {
							//var iframeHeight = $(this).contents().find("body").prop("scrollHeight")
							$(this).height((height - 35) > 100 ? (height - 35) : 300);
						}
				);
				// 显示对话框
				$('#userComponentFrame').contents().find("body").html("");
				$('#' + userComponentFrame).attr("src",param);
				$("#" + userComponentDiv).dialog({
					autoOpen : true,
					modal : true,
					width : width,
					height: height
				});
				$("#" + userComponentDiv).dialog("option", "title", title);
			});
			break;		
		}
		//this.$workArea.delegate(".ico + td","dblclick",{inthis:this},function(e){
		//	var oldTxt=this.innerHTML;
		//	var This=e.data.inthis;
		//	var id=$(this).parents(".GooFlow_item").attr("id");
		//	var t=getElCoordinate(This.$workArea[0]);
		//	This.$textArea.val(oldTxt).css({display:"block",width:$(this).width()+24,height:$(this).height(),
		//		left:t.left+24+This.$nodeData[id].left-This.$workArea[0].parentNode.scrollLeft,
		//		top:t.top+2+This.$nodeData[id].top-This.$workArea[0].parentNode.scrollTop})
		//		.data("id",This.$focus).focus();
		//	This.$workArea.parent().one("mousedown",function(e){
		//		if(e.button==2)return false;
		//		This.setName(This.$textArea.data("id"),This.$textArea.val(),"node");
		//		This.$textArea.val("").removeData("id").hide();
		//	});
		//});
		//绑定结点的删除功能
		this.$workArea.delegate(".rs_close","click",{inthis:this},function(e){
			if(!e)e=window.event;
			e.data.inthis.delNode(e.data.inthis.$focus);
			return false;
		});
		//绑定结点的RESIZE功能
		this.$workArea.delegate(".GooFlow_item > div > div[class!=rs_close]","mousedown",{inthis:this},function(e){
			if(!e)e=window.event;
			if(e.button==2)return false;
			var cursor=$(this).css("cursor");
			if(cursor=="pointer"){return;}
			var This=e.data.inthis;
			var id=This.$focus;
			This.switchToolBtn("cursor");
			e.cancelBubble = true;
			e.stopPropagation();
			var ev=mousePosition(e),t=getElCoordinate(This.$workArea[0]);
			This.$ghost.css({display:"block",
				width:(This.$nodeData[id].width+6)*This.$scale+"px", height:(This.$nodeData[id].height+6)*This.$scale+"px",
				top:This.$nodeData[id].top*This.$scale+t.top-This.$workArea[0].parentNode.scrollTop-_top+"px",
				left:This.$nodeData[id].left*This.$scale+t.left-This.$workArea[0].parentNode.scrollLeft-_left+"px",
				cursor:cursor
			});
			var X,Y;
			X=ev.x-t.left+This.$workArea[0].parentNode.scrollLeft;
			Y=ev.y-t.top+This.$workArea[0].parentNode.scrollTop;
			var vX=(This.$nodeData[id].left*This.$scale+This.$nodeData[id].width*This.$scale)-X;
			var vY=(This.$nodeData[id].top*This.$scale+This.$nodeData[id].height*This.$scale)-Y;
			var isMove=false;

			This.$ghost.css("cursor",cursor);
			document.onmousemove=function(e){
				if(!e)e=window.event;
				var ev=mousePosition(e);
				X=ev.x-t.left+This.$workArea[0].parentNode.scrollLeft-This.$nodeData[id].left*This.$scale+vX;
				Y=ev.y-t.top+This.$workArea[0].parentNode.scrollTop-This.$nodeData[id].top*This.$scale+vY;
				if(X<126*This.$scale)	X=126*This.$scale;
				if(Y<38*This.$scale)	Y=38*This.$scale;
				isMove=true;
				switch(cursor){
					case "nw-resize":This.$ghost.css({width:X+"px",height:Y+"px"});break;
					case "w-resize":This.$ghost.css({width:X+"px"});break;
					case "n-resize":This.$ghost.css({height:Y+"px"});break;
				}
				console.log(This.$ghost.width+"px");
				console.log(This.$ghost.height+"px");
			}
			document.onmouseup=function(e){
				This.$ghost.hide();
				if(!isMove)return;
				if(!e)e=window.event;
				var width = This.$ghost.width();
				var height = This.$ghost.height();
				var _width = This.$ghost.outerWidth();
				var _height = This.$ghost.outerHeight();
				if(This.$ghost.outerWidth()<126*This.$scale)	X=126*This.$scale;
				if(This.$ghost.outerHeight()<38*This.$scale)	Y=38*This.$scale;
				This.resizeNode(id,X/This.$scale,Y/This.$scale);
				document.onmousemove=null;
				document.onmouseup=null;
	  		}
		});
		//绑定各个按钮的点击事件
		this.$tool.on("mousedown",{inthis:this},function(e){
			debugger
			if(!e) e=window.event;
			var tar;
			switch(e.target.tagName){
				case "SPAN":return false;
				case "DIV":return false;
				case "I":	tar=e.target.parentNode;break;
				case "A":	tar=e.target;
			};
			var type=$(tar).attr("type");
			e.data.inthis.switchToolBtn(type);
			// 如果选中的是“鼠标”和“连线”工具则退出
			if (type == "direct" || type == "cursor") {
				return;
			}
			var This=e.data.inthis;
			var tmpID = This.$max;
			X = 0, Y = 0;
			// 增加节点
			This.addNode(tmpID, 
					{name: "node_" + tmpID, 
				left: X / This.$scale,
				top: Y / This.$scale,
				type: This.$nowType,data:"{}",state:"5"});
			This.$nodeDom[tmpID].css("display", "none");
			document.onmousemove=function(e){
				if(!e)e=window.event;
				var newPosX, newPosY;
				// 鼠标在document中的位置
				var ev=mousePosition(e);
				X=ev.x;
				Y=ev.y;
				// 获取工作区的位置
				var workAreaPos = getElCoordinate(This.$workArea[0]);
				scrollLeft = This.$workArea[0].parentNode.scrollLeft;
				scrollTop = This.$workArea[0].parentNode.scrollTop;
					
				newPosX = X - workAreaPos.left + scrollLeft + (document.getElementById("gundongtiao").scrollLeft)
				newPosY = Y - workAreaPos.top + scrollTop + (document.getElementById("gundongtiao").scrollTop)
				newPosX = Math.round(newPosX / initUnit) * initUnit;
				newPosY = Math.round(newPosY / initUnit) * initUnit;
				// 设置节点位置
				This.$nodeDom[tmpID].css({
					left: newPosX,
					top: newPosY
				});
				// 更新nodeData
				This.$nodeData[tmpID].left = newPosX;
				This.$nodeData[tmpID].top = newPosY;
				
				if (This.$nodeDom[tmpID].css("display") == "none") {
					This.$nodeDom[tmpID].css("display", "block");
				}

			}
			document.onmouseup=function(e){
				This.$ghost.hide();
				// 节点计数器 +1
				This.$max++;
				document.onmousemove=null;
				document.onmouseup=null;
	  		}
			
			return false;
		});
	},
	//获取结点/连线/分组区域的详细信息
	getItemInfo:function(id,type){
		switch(type){
			case "node":	return this.$nodeData[id]||null;
			case "line":	return this.$lineData[id]||null;
			case "area":	return this.$areaData[id]||null;
		}
	},
	//取消所有结点/连线被选定的状态
	blurItem: function(){
		if(this.$focus!=""){
			var jq=$("#"+this.$focus);
			if(jq.prop("tagName")=="DIV"){
				if(this.onItemBlur != null && !this.onItemBlur(this.$focus,"node")) return false;
				jq.removeClass("item_focus").children("div:eq(0)").css("display","none");
				jq.css("background-color", GooFlow.prototype.color.node);
				if(GooFlow.prototype.color.line){
					if(this.$nodeData[this.$focus].marked){
						jq.css("border-color",GooFlow.prototype.color.mark||"#ff3300");
					} else {
						jq.css("border-color",GooFlow.prototype.color.node||"#A1DCEB");
					}
				}
			} else{
				if(this.onItemBlur!=null&&!this.onItemBlur(this.$focus,"line"))	return false;
				if(GooFlow.prototype.useSVG!=""){
					if(!this.$lineData[this.$focus].marked){
						if(this.$lineData[this.$focus].state){//libin 如果线是未选中而且state=true
							jq[0].childNodes[1].setAttribute("stroke", GooFlow.prototype.color.lineSuccess);
							jq[0].childNodes[1].setAttribute("marker-end","url(#arrow_lineSuccess)");
						}else {
							jq[0].childNodes[1].setAttribute("stroke",GooFlow.prototype.color.line||"#7281ba");
							jq[0].childNodes[1].setAttribute("marker-end","url(#arrow_lineSuccess)");
						}
						
					}
				}
				else{
					if(!this.$lineData[this.$focus].marked)	jq[0].strokeColor=GooFlow.prototype.color.line||"#7281ba";
				}
				this.$lineMove.hide().removeData("type").removeData("tid");
				if(this.$editable){
						this.$lineOper.hide().removeData("tid");
						this.$mpFrom.hide().removeData("p");
						this.$mpTo.hide().removeData("p");
				}
			}
		}
		this.$focus="";
		return true;
	},
	//选定某个结点/转换线 bool:TRUE决定了要触发选中事件，FALSE则不触发选中事件，多用在程序内部调用。
	focusItem:function(id, bool){
		var jq=$("#"+id);
		if(jq.length==0)	return;
		if(!this.blurItem()) return;//先执行"取消选中",如果返回FLASE,则也会阻止选定事件继续进行.
		if(jq.prop("tagName")=="DIV"){
			if(bool && this.onItemFocus != null && !this.onItemFocus(id,"node")) return;
 			jq.css("background-color", GooFlow.prototype.color.mark);
 			// 增加删除节点的div
			if(this.$editable) jq.children("div:eq(0)").css("display","block");
			// 不需要向画布区域增加流程节点
			//this.$workArea.append(jq);
		}
		else{//如果是连接线
			if(this.onItemFocus!=null&&!this.onItemFocus(id,"line"))	return;
			if(GooFlow.prototype.useSVG!=""){
				jq[0].childNodes[1].setAttribute("stroke",GooFlow.prototype.color.lineMarked || "#ff3300");
				jq[0].childNodes[1].setAttribute("marker-end","url(#arrow2)");
			} else {
				jq[0].strokeColor=GooFlow.prototype.color.lineMarked||"#ff3300";
			}
			if(!this.$editable)	return;
			var x,y,from,to,n;
			if(GooFlow.prototype.useSVG!=""){
				from=jq.attr("from").split(",");
				to=jq.attr("to").split(",");
				n=[from[0],from[1],to[0],to[1]];
			}else{
				n=jq[0].getAttribute("fromTo").split(",");
				from=[n[0],n[1]];
				to=[n[2],n[3]];
			}
			from[0]=parseInt(from[0],10);
			from[1]=parseInt(from[1],10);
			to[0]=parseInt(to[0],10);
			to[1]=parseInt(to[1],10);
			//var t=getElCoordinate(this.$workArea[0]);
			if(this.$lineData[id].type=="lr"){
				from[0]=this.$lineData[id].M*this.$scale;
				to[0]=from[0];
				
				this.$lineMove.css({
					width:"5px",height:(to[1]-from[1])*(to[1]>from[1]? 1:-1)+"px",
					left:from[0]-3+"px",
					top:(to[1]>from[1]? from[1]:to[1])+1+"px",
					cursor:"e-resize",display:"block"
				}).data({"type":"lr","tid":id});
			}
			else if(this.$lineData[id].type=="tb"){
				from[1]=this.$lineData[id].M;
				to[1]=from[1];
				this.$lineMove.css({
					width:(to[0]-from[0])*(to[0]>from[0]? 1:-1)+"px",height:"5px",
					left:(to[0]>from[0]? from[0]:to[0])+1+"px",
					top:from[1]-3+"px",
					cursor:"s-resize",display:"block"
				}).data({"type":"tb","tid":id});
			}
			x=(from[0]+to[0])/2-35 - scrollBarLeft;
			y=(from[1]+to[1])/2+6 - scrollBarTop;
			this.$lineOper.css({display:"block",left:x+"px",top:y+"px"}).data("tid",id);
			if(this.$editable){
				this.$mpFrom.css({display:"block",left:n[0]-4+"px",top:n[1]-4+"px"}).data("p",n[0]+","+n[1]);
				this.$mpTo.css({display:"block",left:n[2]-4+"px",top:n[3]-4+"px"}).data("p",n[2]+","+n[3]);
			}
			this.$draw.appendChild(jq[0]);
		}
		this.$focus=id;
		this.switchToolBtn("cursor");
	},
	//移动结点到一个新的位置
	moveNode:function(id,left,top){
		if(!this.$nodeData[id])	return;
		if(this.onItemMove!=null&&!this.onItemMove(id,"node",left,top))	return;
		
		/**
		 * 设置节点拖拽时按照固定距离进行移动 by jsm
		 */
		left = Math.round(left/dragUnit) * dragUnit;
		top = Math.round(top/dragUnit) * dragUnit;
		if(this.$undoStack){ 
			var paras=[id,this.$nodeData[id].left,this.$nodeData[id].top];
			this.pushOper("moveNode",paras);
		}
		if(left<0)	left=0;
		if(top<0)	top=0;
		$("#"+id).css({left:left*this.$scale+"px",top:top*this.$scale+"px"});
		this.$nodeData[id].left=left;
		this.$nodeData[id].top=top;
		if(this.$title == "designer") {
			//动态修改画布大小
			var drawId = $("#draw_"+this.$id);//libin 获取宽,高
			var drawHeigth = document.getElementById("draw_"+this.$id).style.height.replace("px","");
			var drawWidth = document.getElementById("draw_"+this.$id).style.width.replace("px","");
			if(drawWidth < left){
				drawId.css("width",left+150);
			}
			if(drawHeigth < top){
				drawId.css("height",top+100);
			}
		}
		//重画转换线
		this.resetLines(id,this.$nodeData[id]);
		if(this.$editable){
			this.$nodeData[id].alt=true;
		}
	},
	//设置结点/连线/分组区域的文字信息
	setName:function(id,name,type) {
//				debugger;
		var oldName;
		if(type=="node"){//如果是结点
			if(!this.$nodeData[id])	return;
			if(this.$nodeData[id].name==name)	return;
			if(this.onItemRename!=null&&!this.onItemRename(id,name,"node"))	return;
			oldName=this.$nodeData[id].name;
			this.$nodeData[id].name=name;
			if(this.$nodeData[id].type.indexOf("round")>1){
				this.$nodeDom[id].children(".span").text(name);
			}
			else{
				this.$nodeDom[id].find("td:eq(1)").text(name);
				/*var hack=0;
				if(navigator.userAgent.indexOf("8.0")!=-1)	hack=2;
				var width=this.$nodeDom[id].outerWidth();
				var height=this.$nodeDom[id].outerHeight();
				this.$nodeDom[id].children("table").css({width: width +"px",height: height + "px"});
				this.$nodeData[id].width=width;
				this.$nodeData[id].height=height;*/
			}
			if(this.$editable){
				this.$nodeData[id].alt=true;
			}
			//重画转换线
			this.resetLines(id,this.$nodeData[id]);
		}
		else if(type=="line"){//如果是线
			if(!this.$lineData[id])	return;
			if(this.$lineData[id].name==name)	return;
			if(this.onItemRename!=null&&!this.onItemRename(id,name,"line"))	return;
			oldName=this.$lineData[id].name;
			this.$lineData[id].name=name;
			if(GooFlow.prototype.useSVG!=""){
				this.$lineDom[id].childNodes[2].textContent=name;
			}
			else{
				this.$lineDom[id].childNodes[1].innerHTML=name;
				var n=this.$lineDom[id].getAttribute("fromTo").split(",");
				var x;
				if(this.$lineData[id].type!="lr"){
					x=(n[2]-n[0])/2;
				}
				else{
					var Min=n[2]>n[0]? n[0]:n[2];
					if(Min>this.$lineData[id].M) Min=this.$lineData[id].M;
					x=this.$lineData[id].M-Min;
				}
				if(x<0) x=x*-1;
				this.$lineDom[id].childNodes[1].style.left=x-this.$lineDom[id].childNodes[1].offsetWidth/2+4+"px";
			}
			if(this.$editable){
				this.$lineData[id].alt=true;
			}
		}
		else if(type=="area"){//如果是分组区域
			if(!this.$areaData[id])	return;
			if(this.$areaData[id].name==name)	return;
			if(this.onItemRename!=null&&!this.onItemRename(id,name,"area"))	return;
			oldName=this.$areaData[id].name;
			this.$areaData[id].name=name;
			this.$areaDom[id].children("label").text(name);
			if(this.$editable){
				this.$areaData[id].alt=true;
			}
		}
		if(this.$undoStack){
			var paras=[id,oldName,type];
			this.pushOper("setName",paras);
		}
	},
	//设置结点的尺寸,仅支持非开始/结束结点
	resizeNode:function(id,width,height){
//		debugger;
		if(!this.$nodeData[id])	return;
		if(this.onItemResize!=null&&!this.onItemResize(id,"node",width,height))	return;
		if(this.$nodeData[id].type=="start"||this.$nodeData[id].type=="end")return;
		if(this.$undoStack){
			var paras=[id,this.$nodeData[id].width,this.$nodeData[id].height];
			this.pushOper("resizeNode",paras);
		}
		this.$nodeDom[id].children("table").css({width:width-6+"px",height:height-6+"px"});
		this.$nodeData[id].width=width-6;
		this.$nodeData[id].height=height-6;
		if(this.$editable){
			this.$nodeData[id].alt=true;
		}
		//重画转换线
		this.resetLines(id,this.$nodeData[id]);
	},
	//删除结点
	delNode:function(id){
		if(!this.$nodeData[id])	return;
		if(this.onItemDel!=null&&!this.onItemDel(id,"node"))	return;
		//先删除可能的连线
		for(var k in this.$lineData){
			if(this.$lineData[k].from==id||this.$lineData[k].to==id){
				//this.$draw.removeChild(this.$lineDom[k]);
				//delete this.$lineData[k];
				//delete this.$lineDom[k];
				this.delLine(k);
			}
		}
		//再删除结点本身
		if(this.$undoStack){
			var paras=[id,this.$nodeData[id]];
			this.pushOper("addNode",paras);
		}
		delete this.$nodeData[id];
		this.$nodeDom[id].remove();
		delete this.$nodeDom[id];
		--this.$nodeCount;
		if(this.$focus==id)	this.$focus="";

		if(this.$editable){
			//在回退新增操作时,如果节点ID以this.$id+"_node_"开头,则表示为本次编辑时新加入的节点,这些节点的删除不用加入到$deletedItem中
		//	if(id.indexOf(this.$id+"_node_")<0)libin 源代码
		//		this.$deletedItem[id]="node";
		//}
		if(id.toString().indexOf("node")>-1)
				this.$deletedItem[id]="node";
		}
	},
	//设置流程图的名称
	setTitle:function(text){
		this.$title=text;
		if(this.$head)	this.$head.children("label").attr("title",text).text(text);
	},
	//载入一组数据
	loadData:function(data){
		if(data){
			var t=this.$editable;
			this.$editable=false;
			if(data.title)	this.setTitle(data.title);
			if(data.initNum)	this.$max=data.initNum;
			for(var i in data.nodes)
				this.addNode(i,data.nodes[i]);
			for(var j in data.lines)
				this.addLine(j,data.lines[j]);
			for(var k in data.areas)
				this.addArea(k,data.areas[k]);
			this.$editable=t;
			this.$deletedItem={};
			var drawId = $("#draw_"+this.$id);//libin 获取宽,高
			var drawHeigth = document.getElementById("draw_"+this.$id).style.height.replace("px","");
			var drawWidth = document.getElementById("draw_"+this.$id).style.width.replace("px","");
			if(drawWidth < this.$maxWidth){
				if(this.$title == "designer") {
					drawId.css("width",this.$maxWidth+100);
				} else {
					drawId.css("width",this.$maxWidth+150);
				}
			}
			if(drawHeigth < this.$maxHeight){
				drawId.css("height",this.$maxHeight+100);
			}
		}
	},
	//用AJAX方式，远程读取一组数据
	//参数para为JSON结构，与JQUERY中$.ajax()方法的传参一样
	loadDataAjax:function(para){
		var This=this;
		$.ajax({
			type:para.type,
			url:para.url,
			dataType:"json",
			data:para.data,
			success: function(msg){
				if(para.dataFilter)	para.dataFilter(msg,"json");
     			This.loadData(msg);
				if(para.success)	para.success(msg);
   			},
			error: function(XMLHttpRequest, textStatus, errorThrown){
				if(para.error)	para.error(textStatus,errorThrown);
			}
		})
	},
	//把画好的整个流程图导出到一个变量中(其实也可以直接访问GooFlow对象的$nodeData,$lineData,$areaData这三个JSON属性)
	exportData:function(){
		var ret={title:this.$title,nodes:this.$nodeData,lines:this.$lineData,areas:this.$areaData,initNum:this.$max};
		for(var k1 in ret.nodes){
			if(!ret.nodes[k1].marked){
				delete ret.nodes[k1]["marked"];
			}
		}
		for(var k2 in ret.lines){
			if(!ret.lines[k2].marked){ //不删marked属性 libin
				delete ret.lines[k2]["marked"];
			}
		}
		return ret;
	},
	//只把本次编辑流程图中作了变更(包括增删改)的元素导出到一个变量中,以方便用户每次编辑载入的流程图后只获取变更过的数据
	exportAlter:function(){
		var ret={nodes:{},lines:{},areas:{}};
		for(var k1 in this.$nodeData){
			if(this.$nodeData[k1].alt){
				ret.nodes[k1]=this.$nodeData[k1];
			}
		}
		for(var k2 in this.$lineData){
			if(this.$lineData[k2].alt){
				ret.lines[k2]=this.$lineData[k2];
			}
		}
		for(var k3 in this.$areaData){
			if(this.$areaData[k3].alt){
				ret.areas[k3]=this.$areaData[k3];
			}
		}
		ret.deletedItem=this.$deletedItem;
		return ret;
	},
	//变更元素的ID,一般用于快速保存后,将后台返回新元素的ID更新到页面中;type为元素类型(节点,连线,区块)
	transNewId:function(oldId,newId,type){
		var tmp;
		switch(type){
			case "node":
			if(this.$nodeData[oldId]){
				tmp=this.$nodeData[oldId];
				delete this.$nodeData[oldId];
				this.$nodeData[newId]=tmp;
				tmp=this.$nodeDom[oldId].attr("id",newId);
				delete this.$nodeDom[oldId];
				this.$nodeDom[newId]=tmp;
			}
			break;
			case "line":
			if(this.$lineData[oldId]){
				tmp=this.$lineData[oldId];
				delete this.$lineData[oldId];
				this.$lineData[newId]=tmp;
				tmp=this.$lineDom[oldId].attr("id",newId);
				delete this.$lineDom[oldId];
				this.$lineDom[newId]=tmp;
			}
			break;
			case "area":
			if(this.$areaData[oldId]){
				tmp=this.$areaData[oldId];
				delete this.$areaData[oldId];
				this.$areaData[newId]=tmp;
				tmp=this.$areaDom[oldId].attr("id",newId);
				delete this.$areaDom[oldId];
				this.$areaDom[newId]=tmp;
			}
			break;
		}
	},
	//清空工作区及已载入的数据
	clearData:function(){
		for(var key in this.$nodeData){
			this.delNode(key);
		}
		for(var key in this.$lineData){
			this.delLine(key);
		}
		for(var key in this.$areaData){
			this.delArea(key);
		}
		this.$deletedItem={};
	},
	//销毁自己
	destrory:function(){
		this.$bgDiv.empty();
		this.$lineData=null;
		this.$nodeData=null;
		this.$lineDom=null;
		this.$nodeDom=null;
		this.$areaDom=null;
		this.$areaData=null;
		this.$nodeCount=0;
		this.$areaCount=0;
		this.$areaCount=0;
		this.$deletedItem={};
	},
///////////以下为有关画线的方法
	//绘制一条箭头线，并返回线的DOM
	drawLine:function(id,sp,ep,mark,dash,state){
		var line;
		if(GooFlow.prototype.useSVG!=""){
			line=document.createElementNS("http://www.w3.org/2000/svg","g");
			var hi=document.createElementNS("http://www.w3.org/2000/svg","path");
			var path=document.createElementNS("http://www.w3.org/2000/svg","path");

			if(id!="")	line.setAttribute("id",id);
			line.setAttribute("from",sp[0]+","+sp[1]);
			line.setAttribute("to",ep[0]+","+ep[1]);
			
			hi.setAttribute("visibility","hidden");
			hi.setAttribute("stroke-width",0);
			hi.setAttribute("fill","none"); //libin线的颜色
			hi.setAttribute("stroke","white");
			hi.setAttribute("d","M "+sp[0]+" "+sp[1]+" L "+ep[0]+" "+ep[1]);
			hi.setAttribute("pointer-events","stroke");
			
			path.setAttribute("d","M "+sp[0]+" "+sp[1]+" L "+ep[0]+" "+ep[1]);
			path.setAttribute("stroke-width",1.5);
			path.setAttribute("stroke-linecap","round");//libin  边线形状圆的（round、butt、square）  
			path.setAttribute("fill","none");
			
			if(dash) path.setAttribute("style", "stroke-dasharray:6, 5");//设置虚线
//			debugger
			if(mark){//libin 修改
				if(state){
					path.setAttribute("stroke","green");
					path.setAttribute("marker-end","url(#arrow2_1)");
				} else {
					path.setAttribute("stroke",GooFlow.prototype.color.mark || GooFlow.prototype.lineColor);
					path.setAttribute("marker-end","url(#arrow2)");
				}
				
			} else {
				if(state){
					path.setAttribute("stroke", GooFlow.prototype.color.lineSuccess);
					path.setAttribute("marker-end","url(#arrow_lineSuccess)");
				} else {
					path.setAttribute("stroke",GooFlow.prototype.color.line|| GooFlow.prototype.lineColor);
					path.setAttribute("marker-end","url(#arrow1)");
				}
			}
			line.appendChild(hi);
			line.appendChild(path);
			line.style.cursor="crosshair";
			if(id!=""&&id!="GooFlow_tmp_line"){
				var text=document.createElementNS("http://www.w3.org/2000/svg","text");
				text.setAttribute("fill",GooFlow.prototype.color.font||"#333");
				line.appendChild(text);
				var x=(ep[0]+sp[0])/2;
				var y=(ep[1]+sp[1])/2;
				text.setAttribute("text-anchor","middle");
				text.setAttribute("x",x);
				text.setAttribute("y",y);
				line.style.cursor="pointer";
				text.style.cursor="text";
                text.style.fontSize=14*this.$scale+"px";
			}
		}else{
			line=document.createElement("v:polyline");
			if(id!="")	line.id=id;
			//line.style.position="absolute";
			line.points.value=sp[0]+","+sp[1]+" "+ep[0]+","+ep[1];
			line.setAttribute("fromTo",sp[0]+","+sp[1]+","+ep[0]+","+ep[1]);
			line.strokeWeight="1.2";
			line.stroke.EndArrow="Block";
			line.style.cursor="crosshair";
			if(id!=""&&id!="GooFlow_tmp_line"){
				var text=document.createElement("div");
				//text.innerHTML=id;
				line.appendChild(text);
				var x=(ep[0]-sp[0])/2;
				var y=(ep[1]-sp[1])/2;
				if(x<0) x=x*-1;
				if(y<0) y=y*-1;
				text.style.left=x+"px";
				text.style.top=y-6+"px";
				line.style.cursor="pointer";
				text.style.fontSize=14*this.$scale+"px";
			}
			if(dash)	line.stroke.dashstyle="Dash";
			if(mark)	line.strokeColor=GooFlow.prototype.color.mark||"#ff3300";
			else	line.strokeColor=GooFlow.prototype.color.line||"#7281ba";
			line.fillColor=GooFlow.prototype.color.line||"#7281ba";
		}
		return line;
	},
	//画一条只有两个中点的折线
	drawPoly:function(id,sp,m1,m2,ep,mark,state){
		var poly,strPath;
		if(GooFlow.prototype.useSVG!=""){
			poly=document.createElementNS("http://www.w3.org/2000/svg","g");
			var hi=document.createElementNS("http://www.w3.org/2000/svg","path");
			var path=document.createElementNS("http://www.w3.org/2000/svg","path");
			if(id!="")	poly.setAttribute("id",id);
			poly.setAttribute("from",sp[0]+","+sp[1]);
			poly.setAttribute("to",ep[0]+","+ep[1]);
			hi.setAttribute("visibility","hidden");
			hi.setAttribute("stroke-width",9);
			hi.setAttribute("fill","none");
			hi.setAttribute("stroke","white");
			strPath="M "+sp[0]+" "+sp[1];
			if(m1[0]!=sp[0]||m1[1]!=sp[1])
				strPath+=" L "+m1[0]+" "+m1[1];
			if(m2[0]!=ep[0]||m2[1]!=ep[1])
				strPath+=" L "+m2[0]+" "+m2[1];
			strPath+=" L "+ep[0]+" "+(ep[1]);
			hi.setAttribute("d",strPath);
			hi.setAttribute("pointer-events","stroke");
			path.setAttribute("d",strPath);
			path.setAttribute("stroke-width",1.5);
			path.setAttribute("stroke-linecap","round");
			path.setAttribute("fill","none");
			if(mark){
				if(state){
					path.setAttribute("stroke","green");
					path.setAttribute("marker-end","url(#arrow2_1)");
				} else {
					path.setAttribute("stroke",GooFlow.prototype.color.line||"#ff3300");
					path.setAttribute("marker-end","url(#arrow2)");
				}
			}
			else{
				if(state){
					path.setAttribute("stroke","green");
					path.setAttribute("marker-end","url(#arrow2_1)");
				} else {
					path.setAttribute("stroke",GooFlow.prototype.color.line||"#7281ba");
					path.setAttribute("marker-end","url(#arrow1)");
				}
			}
			poly.appendChild(hi);
			poly.appendChild(path);
			var text=document.createElementNS("http://www.w3.org/2000/svg","text");
			text.setAttribute("fill",GooFlow.prototype.color.font||"#333");
			poly.appendChild(text);
			var x=(m2[0]+m1[0])/2;
			var y=(m2[1]+m1[1])/2;
			text.setAttribute("text-anchor","middle");
			text.setAttribute("x",x);
			text.setAttribute("y",y);
			text.style.cursor="text";
			poly.style.cursor="pointer";
			text.style.fontSize=14*this.$scale+"px";
		}
		else{
			poly=document.createElement("v:Polyline");
			if(id!="")	poly.id=id;
			poly.filled="false";
			strPath=sp[0]+","+sp[1];
			if(m1[0]!=sp[0]||m1[1]!=sp[1])
				strPath+=" "+m1[0]+","+m1[1];
			if(m2[0]!=ep[0]||m2[1]!=ep[1])
				strPath+=" "+m2[0]+","+m2[1];
			strPath+=" "+ep[0]+","+ep[1];
			poly.points.value=strPath;
			poly.setAttribute("fromTo",sp[0]+","+sp[1]+","+ep[0]+","+ep[1]);
			poly.strokeWeight="1.2";
			poly.stroke.EndArrow="Block";
			var text=document.createElement("div");
			//text.innerHTML=id;
			poly.appendChild(text);
			var x=(m2[0]-m1[0])/2;
			var y=(m2[1]-m1[1])/2;
			if(x<0) x=x*-1;
			if(y<0) y=y*-1;
			text.style.left=x+"px";
			text.style.top=y-4+"px";
            text.style.fontSize=14*this.$scale+"px";
			poly.style.cursor="pointer";
			if(mark)	poly.strokeColor=GooFlow.prototype.color.mark||"#ff3300";
			else	poly.strokeColor=GooFlow.prototype.color.line||"#7281ba";
		}
		return poly;
	},
	//计算两个结点间要连直线的话，连线的开始坐标和结束坐标
	calcStartEnd:function(n1,n2,scale){
		if(!scale)	scale=1.0;
		var X_1,Y_1,X_2,Y_2;
		var t11=[n1.left*scale+(n1.width+6)*scale/2,n1.top*scale];//开始节点上边界中心位置
		var h11=[n1.left*scale,n1.top*scale+(n1.height+6)*scale/2];//开始节点左边界中心位置
		var t12=[n1.left*scale+(n1.width+6)*scale/2,n1.top*scale+(n1.height+6)*scale/2];//开始节点下边界中心位置
		var h12=[n1.left*scale+(n1.width+6)*scale,n1.top*scale+(n1.height+6)*scale/2];//开始节点有边界中心位置
		var t21=[n2.left*scale+(n2.width+6)*scale/2,n2.top*scale];//结束节点上边界中心位置
		var h21=[n2.left*scale,n2.top*scale+(n2.height+6)*scale/2];//结束节点左边界中心位置
		var t22=[n2.left*scale+(n2.width+6)*scale/2,n2.top*scale+(n2.height+6)*scale/2];//结束节点下边界中心位置
		var h22=[n2.left*scale+(n2.width+6)*scale,n2.top*scale+(n2.height+6)*scale/2];//结束节点右边界中心位置
		var start,end;
		//X判断：
		var x11=n1.left*scale,x12=n1.left*scale+(n1.width+6)*scale,x21=n2.left*scale,x22=n2.left*scale+(n2.width+6)*scale;
		var y11=n1.top*scale,y12=n1.top*scale+(n1.height+6)*scale,y21=n2.top*scale,y22=n2.top*scale+(n2.height+6)*scale;
		
		if(x12+10<=x21){
			//开始在结束左边界,不包含(重合区域+10)
			if(y12+20<=y21){
				start = t12;
				end = h21;
			}else if(y11-20>=y22){
				start = t11;
				end = h21;
			}else{
				start = h12;
				end = h21;
			}
		}else if(x11-10>=x22){
			//开始在结束右边界，不包含(重合区域+10)
			if(y12+20<=y21){
				start = t12;
				end = h22;
			}else if(y11-20>=y22){
				start = t11;
				end = h22;
			}else{
				start = h11;
				end = h22;
			}
		}else if(y11>y22){
			start = t11;
			t22[1] = t22[1]+25; 
			end = t22;
		}else if(y21>y12){
			start = t12;
			end = t21;
		}else if(y12>y21){
			start = t12;
			end = t21;
		}else if(y22>y11){
			start = t22;
			end = t11;
		}
//		//结点2在结点1左边
//		if(x11>=x22){
//			X_1=x11;X_2=x22+8;//李斌 修改画线箭头位置
//		}
//		//结点2在结点1右边
//		else if(x12<=x21){
//			X_1=x12;X_2=x21-1;//李斌 修改画线箭头位置
//		}
//		//结点2在结点1水平部分重合
//		else if(x11<=x21&&x12>=x21&&x12<=x22){
//			X_1=(x12+x21)/2;X_2=X_1;
//		}
//		else if(x11>=x21&&x12<=x22){
//			X_1=(x11+x12)/2;X_2=X_1;
//		}
//		else if(x21>=x11&&x22<=x12){
//			X_1=(x21+x22)/2;X_2=X_1;
//		}
//		else if(x11<=x22&&x12>=x22){
//			X_1=(x11+x22)/2;X_2=X_1;
//		}
//		
//		//Y判断：
//		//结点2在结点1上边
//		if(y11>=y22){
//			Y_1=y11;Y_2=y22+8;//李斌 修改画线箭头位置
//		}
//		//结点2在结点1下边
//		else if(y12<=y21){
//			Y_1=y12;Y_2=y21-1;//李斌 修改画线箭头位置
//		}
//		//结点2在结点1垂直部分重合
//		else if(y11<=y21&&y12>=y21&&y12<=y22){
//			Y_1=(y12+y21)/2;Y_2=Y_1;
//		}
//		else if(y11>=y21&&y12<=y22){
//			Y_1=(y11+y12)/2;Y_2=Y_1;
//		}
//		else if(y21>=y11&&y22<=y12){
//			Y_1=(y21+y22)/2;Y_2=Y_1;
//		}
//		else if(y11<=y22&&y12>=y22){
//			Y_1=(y11+y22)/2;Y_2=Y_1;
//		}
		return {"start":start,"end":end};
	},
	//计算两个结点间要连折线的话，连线的所有坐标
	calcPolyPoints:function(n1,n2,type,M,scale){
        if(!scale)	scale=1.0;
		var N1={left:n1.left*scale, top:n1.top*scale, width:(n1.width+6)*scale, height:(n1.height+6)*scale};
        var N2={left:n2.left*scale, top:n2.top*scale, width:(n2.width+6)*scale, height:(n2.height+6)*scale};
        M=M*scale;
		//开始/结束两个结点的中心
		var SP={x:N1.left+N1.width/2,y:N1.top+N1.height/2};
		var EP={x:N2.left+N2.width/2,y:N2.top+N2.height/2};
		var sp=[],m1=[],m2=[],ep=[];
		//如果是允许中段可左右移动的折线,则参数M为可移动中段线的X坐标
		//粗略计算起始点
		sp=[SP.x,SP.y];
		ep=[EP.x,EP.y];
		if(type=="lr"){
			//粗略计算2个中点
			m1=[M,SP.y];
			m2=[M,EP.y];
			//再具体分析修改开始点和中点1
			if(m1[0]>N1.left&&m1[0]<N1.left+N1.width){
				m1[1]=(SP.y>EP.y? N1.top:N1.top+N1.height);
				sp[0]=m1[0];sp[1]=m1[1];
			}
			else{
				sp[0]=(m1[0]<N1.left? N1.left:N1.left+N1.width)
			}
			//再具体分析中点2和结束点
			if(m2[0]>N2.left&&m2[0]<N2.left+N2.width){
				m2[1]=(SP.y>EP.y? N2.top+N2.height:N2.top);
				ep[0]=m2[0];ep[1]=m2[1];
			}
			else{
				ep[0]=(m2[0]<N2.left? N2.left:N2.left+N2.width)
			}
		}
		//如果是允许中段可上下移动的折线,则参数M为可移动中段线的Y坐标
		else if(type=="tb"){
			//粗略计算2个中点
			m1=[SP.x,M];
			m2=[EP.x,M];
			//再具体分析修改开始点和中点1
			if(m1[1]>N1.top&&m1[1]<N1.top+N1.height){
				m1[0]=(SP.x>EP.x? N1.left:N1.left+N1.width);
				sp[0]=m1[0];sp[1]=m1[1];
			}
			else{
				sp[1]=(m1[1]<N1.top? N1.top:N1.top+N1.height)
			}
			//再具体分析中点2和结束点
			if(m2[1]>N2.top&&m2[1]<N2.top+N2.height){
				m2[0]=(SP.x>EP.x? N2.left+N2.width:N2.left);
				ep[0]=m2[0];ep[1]=m2[1];
			}
			else{
				ep[1]=(m2[1]<N2.top? N2.top:N2.top+N2.height);
			}
		}
		return {start:sp,m1:m1,m2:m2,end:ep};
	},
	//初始化折线中段的X/Y坐标,mType='rb'时为X坐标,mType='tb'时为Y坐标
	getMValue:function(n1,n2,mType,scale){
        if(!scale)	scale=1.0;
		if(mType=="lr"){
			return (n1.left*scale + (n1.width+6)*scale/2 + n2.left*scale + (n2.width+6)*scale/2 )/2;
		}
		else if(mType=="tb"){
			return (n1.top*scale + (n1.height+6)*scale/2 + n2.top*scale + (n2.height+6)*scale/2 )/2;
		}
	},
	//原lineData已经设定好的情况下，只在绘图工作区画一条线的页面元素
	addLineDom:function(id,lineData){
//		debugger;
		var n1=this.$nodeData[lineData.from],n2=this.$nodeData[lineData.to];//获取开始/结束结点的数据
		if(!n1||!n2)	return;
		//开始计算线端点坐标
		var res;
		if(lineData.type&&lineData.type!="sl"){
			res=GooFlow.prototype.calcPolyPoints(n1,n2,lineData.type,lineData.M, this.$scale);
		}else
			res=GooFlow.prototype.calcStartEnd(n1,n2, this.$scale);
		if(!res)	return;
		
		if(lineData.type=="sl")
			this.$lineDom[id]=GooFlow.prototype.drawLine(id,res.start,res.end,lineData.marked,false,lineData.state);//libin 添加state
		else {											
			if(this.$title == "designer") {
				this.$lineDom[id]=GooFlow.prototype.drawPoly(id,res.start,res.m1,res.m2,res.end,lineData.marked,false,lineData.state);
			} else {
				this.$lineDom[id]=GooFlow.prototype.drawPoly(id,res.start,res.m1,res.m2,res.end,lineData.marked,lineData.state);
			}
		}
		//this.$lineDom[id]=GooFlow.prototype.drawPoly(id,res.start,res.m1,res.m2,res.end,lineData.marked,lineData.state);
		this.$draw.appendChild(this.$lineDom[id]);
		if(GooFlow.prototype.useSVG==""){
			this.$lineDom[id].childNodes[1].innerHTML=lineData.name;
			if(lineData.type!="sl"){
				var Min=(res.start[0]>res.end[0]? res.end[0]:res.start[0]);
				if(Min>res.m2[0])	Min=res.m2[0];
				if(Min>res.m1[0])	Min=res.m1[0];
				this.$lineDom[id].childNodes[1].style.left = (res.m2[0]+res.m1[0])/2-Min-this.$lineDom[id].childNodes[1].offsetWidth/2+4;
				Min=(res.start[1]>res.end[1]? res.end[1]:res.start[1]);
				if(Min>res.m2[1])	Min=res.m2[1];
				if(Min>res.m1[1])	Min=res.m1[1];
				this.$lineDom[id].childNodes[1].style.top = (res.m2[1]+res.m1[1])/2-Min-this.$lineDom[id].childNodes[1].offsetHeight/2;
			}else
				this.$lineDom[id].childNodes[1].style.left=
				((res.end[0]-res.start[0])*(res.end[0]>res.start[0]? 1:-1)-this.$lineDom[id].childNodes[1].offsetWidth)/2+4;
		}
		else	this.$lineDom[id].childNodes[2].textContent=lineData.name;
	},
	//增加一条线
	addLine:function(id,json){
		if(this.onItemAdd!=null&&!this.onItemAdd(id,"line",json))return;
		if(this.$undoStack&&this.$editable){
			this.pushOper("delLine",[id]);
		}
		if(json.from==json.to)	return;
		var n1=this.$nodeData[json.from],n2=this.$nodeData[json.to];//获取开始/结束结点的数据
		if(!n1||!n2)	return;
		//避免两个节点间不能有一条以上同向接连线
		for(var k in this.$lineData){
			if((json.from==this.$lineData[k].from&&json.to==this.$lineData[k].to))
				return;
		}
		//设置$lineData[id]
		this.$lineData[id]={};
		if(json.type){
			this.$lineData[id].type=json.type;
			this.$lineData[id].M=json.M;
		}
		else	this.$lineData[id].type="sl";//默认为直线
		this.$lineData[id].from=json.from;
		this.$lineData[id].to=json.to;
		this.$lineData[id].name=json.name;
		this.$lineData[id].state=json.state;
		if(json.marked)	this.$lineData[id].marked=json.marked;
		else	this.$lineData[id].marked=false;
		//设置$lineData[id]完毕
		
		this.addLineDom(id,this.$lineData[id]);
		
		++this.$lineCount;
		if(this.$editable){
			this.$lineData[id].alt=true;
			if(this.$deletedItem[id])	delete this.$deletedItem[id];//在回退删除操作时,去掉该元素的删除记录
		}
	},
	//重构所有连向某个结点的线的显示，传参结构为$nodeData数组的一个单元结构
	resetLines:function(id,node){
		for(var i in this.$lineData){
		  var other=null;//获取结束/开始结点的数据
		  var res;
		  if(this.$lineData[i].from==id){//找结束点
			other=this.$nodeData[this.$lineData[i].to]||null;
			if(other==null)	continue;
			if(this.$lineData[i].type=="sl")
				res=GooFlow.prototype.calcStartEnd(node,other,this.$scale);
			else{
				res=GooFlow.prototype.calcPolyPoints(node,other,this.$lineData[i].type,this.$lineData[i].M, this.$scale)
			}
				if(!res)	break;
		  }
		  else if(this.$lineData[i].to==id){//找开始点
			other=this.$nodeData[this.$lineData[i].from]||null;
			if(other==null)	continue;
			if(this.$lineData[i].type=="sl")
				res=GooFlow.prototype.calcStartEnd(other,node,this.$scale);
			else
				{
				res=GooFlow.prototype.calcPolyPoints(other,node,this.$lineData[i].type,this.$lineData[i].M, this.$scale);
		  }
				if(!res)	break;
		  }
		  if(other==null)	continue;
		  this.$draw.removeChild(this.$lineDom[i]);
		  if(this.$lineData[i].type=="sl"){
		  	this.$lineDom[i]=GooFlow.prototype.drawLine(i,res.start,res.end,this.$lineData[i].marked);
		  }
		  else{
			this.$lineDom[i]=GooFlow.prototype.drawPoly(i,res.start,res.m1,res.m2,res.end,this.$lineData[i].marked);
		  }
		  this.$draw.appendChild(this.$lineDom[i]);
		  if(GooFlow.prototype.useSVG==""){
			this.$lineDom[i].childNodes[1].innerHTML=this.$lineData[i].name;
			if(this.$lineData[i].type!="sl"){
				var Min=(res.start[0]>res.end[0]? res.end[0]:res.start[0]);
				if(Min>res.m2[0])	Min=res.m2[0];
				if(Min>res.m1[0])	Min=res.m1[0];
				this.$lineDom[i].childNodes[1].style.left = (res.m2[0]+res.m1[0])/2-Min-this.$lineDom[i].childNodes[1].offsetWidth/2+4;
				Min=(res.start[1]>res.end[1]? res.end[1]:res.start[1]);
				if(Min>res.m2[1])	Min=res.m2[1];
				if(Min>res.m1[1])	Min=res.m1[1];
				this.$lineDom[i].childNodes[1].style.top = (res.m2[1]+res.m1[1])/2-Min-this.$lineDom[i].childNodes[1].offsetHeight/2-4;
			}else
				this.$lineDom[i].childNodes[1].style.left=
				((res.end[0]-res.start[0])*(res.end[0]>res.start[0]? 1:-1)-this.$lineDom[i].childNodes[1].offsetWidth)/2+4;
		  }
		  else	this.$lineDom[i].childNodes[2].textContent=this.$lineData[i].name;
		}
	},
	//重新设置连线的样式 newType= "sl":直线, "lr":中段可左右移动型折线, "tb":中段可上下移动型折线
	setLineType:function(id,newType,M){
		if(!newType||newType==null||newType==""||newType==this.$lineData[id].type)	return false;
		if(this.onLineSetType!=null&&!this.onLineSetType(id,newType))	return;
		if(this.$undoStack){
			var paras=[id,this.$lineData[id].type,this.$lineData[id].M];
			this.pushOper("setLineType",paras);
		}
		var from=this.$lineData[id].from;
		var to=this.$lineData[id].to;
		this.$lineData[id].type=newType;
		var res;
		//如果是变成折线
		if(newType!="sl"){
		  var res=GooFlow.prototype.calcPolyPoints(this.$nodeData[from],this.$nodeData[to],this.$lineData[id].type,this.$lineData[id].M, this.$scale);
		  if(M){
		  	this.setLineM(id,M,true);
		  }else{
		  	this.setLineM(id,this.getMValue(this.$nodeData[from],this.$nodeData[to],newType),true);
		  }
		}
		//如果是变回直线
		else{
		  delete this.$lineData[id].M;
		  this.$lineMove.hide().removeData("type").removeData("tid");
		  res=GooFlow.prototype.calcStartEnd(this.$nodeData[from],this.$nodeData[to],this.$scale);
		  if(!res)	return;
		  this.$draw.removeChild(this.$lineDom[id]);
		  this.$lineDom[id]=GooFlow.prototype.drawLine(id,res.start,res.end,this.$lineData[id].marked||this.$focus==id);
		  this.$draw.appendChild(this.$lineDom[id]);
		  if(GooFlow.prototype.useSVG==""){
		  	this.$lineDom[id].childNodes[1].innerHTML=this.$lineData[id].name;
			this.$lineDom[id].childNodes[1].style.left=
			((res.end[0]-res.start[0])*(res.end[0]>res.start[0]? 1:-1)-this.$lineDom[id].childNodes[1].offsetWidth)/2+4;
		  }
		  else
			this.$lineDom[id].childNodes[2].textContent=this.$lineData[id].name;
		}
		if(this.$focus==id){
			this.focusItem(id);
		}
		if(this.$editable){
			this.$lineData[id].alt=true;
		}
	},
	//设置折线中段的X坐标值（可左右移动时）或Y坐标值（可上下移动时）
	setLineM:function(id,M,noStack){
		if(!this.$lineData[id]||M<0||!this.$lineData[id].type||this.$lineData[id].type=="sl")	return false;
		if(this.onLineMove!=null&&!this.onLineMove(id,M))	return false;
		if(this.$undoStack&&!noStack){
			var paras=[id,this.$lineData[id].M];
			this.pushOper("setLineM",paras);
		}
		var from=this.$lineData[id].from;
		var to=this.$lineData[id].to;
		this.$lineData[id].M=M;
		var ps=GooFlow.prototype.calcPolyPoints(this.$nodeData[from],this.$nodeData[to],this.$lineData[id].type,this.$lineData[id].M, this.$scale);
		this.$draw.removeChild(this.$lineDom[id]);
		this.$lineDom[id]=GooFlow.prototype.drawPoly(id,ps.start,ps.m1,ps.m2,ps.end,this.$lineData[id].marked||this.$focus==id);
		this.$draw.appendChild(this.$lineDom[id]);
		if(GooFlow.prototype.useSVG==""){
			this.$lineDom[id].childNodes[1].innerHTML=this.$lineData[id].name;
			var Min=(ps.start[0]>ps.end[0]? ps.end[0]:ps.start[0]);
			if(Min>ps.m2[0])	Min=ps.m2[0];
			if(Min>ps.m1[0])	Min=ps.m1[0];
			this.$lineDom[id].childNodes[1].style.left = (ps.m2[0]+ps.m1[0])/2-Min-this.$lineDom[id].childNodes[1].offsetWidth/2+4;
			Min=(ps.start[1]>ps.end[1]? ps.end[1]:ps.start[1]);
			if(Min>ps.m2[1])	Min=ps.m2[1];
			if(Min>ps.m1[1])	Min=ps.m1[1];
			this.$lineDom[id].childNodes[1].style.top = (ps.m2[1]+ps.m1[1])/2-Min-this.$lineDom[id].childNodes[1].offsetHeight/2-4;
		}
		else	this.$lineDom[id].childNodes[2].textContent=this.$lineData[id].name;
		if(this.$editable){
			this.$lineData[id].alt=true;
		}
	},
	//删除转换线
	delLine:function(id){
		if(!this.$lineData[id])	return;
		if(this.onItemDel!=null&&!this.onItemDel(id,"node"))	return;
		if(this.$undoStack){
			var paras=[id,this.$lineData[id]];
			this.pushOper("addLine",paras);
		}
		this.$draw.removeChild(this.$lineDom[id]);
		delete this.$lineData[id];
		delete this.$lineDom[id];
		if(this.$focus==id)	this.$focus="";
		--this.$lineCount;
		if(this.$editable){
			//在回退新增操作时,如果节点ID以this.$id+"_line_"开头,则表示为本次编辑时新加入的节点,这些节点的删除不用加入到$deletedItem中
			if(id.indexOf(this.$id+"_line_")<0)
			this.$deletedItem[id]="line";
			this.$mpFrom.hide().removeData("p");
			this.$mpTo.hide().removeData("p");
		}
		this.$lineOper.hide().removeData("tid");
	},
	//变更连线两个端点所连的结点
	//参数：要变更端点的连线ID，新的开始结点ID、新的结束结点ID；如果开始/结束结点ID是传入null或者""，则表示原端点不变
	moveLinePoints:function(lineId, newStart, newEnd, noStack){
		if(newStart==newEnd)	return;
		if(!lineId||!this.$lineData[lineId])	return;
		if(newStart==null||newStart=="")
			newStart=this.$lineData[lineId].from;
		if(newEnd==null||newEnd=="")
			newEnd=this.$lineData[lineId].to;

		//避免两个节点间不能有一条以上同向接连线
		for(var k in this.$lineData){
			if((newStart==this.$lineData[k].from&&newEnd==this.$lineData[k].to))
				return;
		}
		if(this.onLinePointMove!=null&&!this.onLinePointMove(id,newStart,newEnd))	return;
		if(this.$undoStack&&!noStack){
			var paras=[lineId,this.$lineData[lineId].from,this.$lineData[lineId].to];
			this.pushOper("moveLinePoints",paras);
		}
		if(newStart!=null&&newStart!=""){
			this.$lineData[lineId].from=newStart;
		}
		if(newEnd!=null&&newEnd!=""){
			this.$lineData[lineId].to=newEnd;
		}
		//重建转换线
		this.$draw.removeChild(this.$lineDom[lineId]);
		this.addLineDom(lineId,this.$lineData[lineId]);
		if(this.$editable){
			this.$lineData[lineId].alt=true;
		}
	},
	
	//用颜色标注/取消标注一个结点或转换线，常用于显示重点或流程的进度。
	//这是一个在编辑模式中无用,但是在纯浏览模式中非常有用的方法，实际运用中可用于跟踪流程的进度。
	markItem:function(id,type,mark){
		if(type=="node"){
			if(!this.$nodeData[id])	return;
			if(this.onItemMark!=null&&!this.onItemMark(id,"node",mark))	return;
			this.$nodeData[id].marked=mark||false;
			if(mark){
				this.$nodeDom[id].addClass("item_mark");
        jq.css("border-color",GooFlow.prototype.color.mark);
			}
			else{
				this.$nodeDom[id].removeClass("item_mark");
				if(id!=this.$focus) jq.css("border-color","transparent");
			}
			
		}else if(type=="line"){
			if(!this.$lineData[id])	return;
			if(this.onItemMark!=null&&!this.onItemMark(id,"line",mark))	return;
			this.$lineData[id].marked=mark||false;
			if(GooFlow.prototype.useSVG!=""){
				if(mark){
					this.$nodeDom[id].childNodes[1].setAttribute("stroke",GooFlow.prototype.color.mark||"#ff3300");
					this.$nodeDom[id].childNodes[1].setAttribute("marker-end","url(#arrow2)");
				}else{
					this.$nodeDom[id].childNodes[1].setAttribute("stroke",GooFlow.prototype.color.line||"#7281ba");
					this.$nodeDom[id].childNodes[1].setAttribute("marker-end","url(#arrow1)");
				}
			}else{
				if(mark)	this.$nodeDom[id].strokeColor=GooFlow.prototype.color.mark||"#ff3300";
				else	this.$nodeDom[id].strokeColor=GooFlow.prototype.color.line||"#7281ba"
			}
		}
		if(this.$undoStatck){
			var paras=[id,type,!mark];
			this.pushOper("markItem",paras);
		}
	},
	////////////////////////以下为区域分组块操作
	moveArea:function(id,left,top){
		if(!this.$areaData[id])	return;
		if(this.onItemMove!=null&&!this.onItemMove(id,"area",left,top))	return;
		if(this.$undoStack){
			var paras=[id,this.$areaData[id].left,this.$areaData[id].top];
			this.pushOper("moveNode",paras);
		}
		if(left<0)	left=0;
		if(top<0)	top=0;
		$("#"+id).css({left:left*this.$scale+"px",top:top*this.$scale+"px"});
		this.$areaData[id].left=left;
		this.$areaData[id].top=top;
		if(this.$editable){
			this.$areaData[id].alt=true;
		}
	},
	//删除区域分组
	delArea:function(id){
		if(!this.$areaData[id])	return;
		if(this.$undoStack){
			var paras=[id,this.$areaData[id]];
			this.pushOper("addArea",paras);
		}
		if(this.onItemDel!=null&&!this.onItemDel(id,"node"))	return;
		delete this.$areaData[id];
		this.$areaDom[id].remove();
		delete this.$areaDom[id];
		--this.$areaCount;
		if(this.$editable){
			//在回退新增操作时,如果节点ID以this.$id+"_area_"开头,则表示为本次编辑时新加入的节点,这些节点的删除不用加入到$deletedItem中
			if(id.indexOf(this.$id+"_area_")<0)
			this.$deletedItem[id]="area";
		}
	},
	//设置区域分组的颜色
	setAreaColor:function(id,color){
		if(!this.$areaData[id])	return;
		if(this.$undoStack){
			var paras=[id,this.$areaData[id].color];
			this.pushOper("setAreaColor",paras);
		}
		if(color=="red"||color=="yellow"||color=="blue"||color=="green"){
			this.$areaDom[id].removeClass("area_"+this.$areaData[id].color).addClass("area_"+color);
			this.$areaData[id].color=color;
		}
		if(this.$editable){
			this.$areaData[id].alt=true;
		}
	},
	//设置区域分块的尺寸
	resizeArea:function(id,width,height){
		if(!this.$areaData[id])	return;
		if(this.onItemResize!=null&&!this.onItemResize(id,"area",width,height))	return;
		if(this.$undoStack){
			var paras=[id,this.$areaData[id].width,this.$areaData[id].height];
			this.pushOper("resizeArea",paras);
		}
		var hack=0;
		if(navigator.userAgent.indexOf("8.0")!=-1)	hack=2;
		this.$areaDom[id].children(".bg").css({width:width*this.$scale+"px",height:height*this.$scale+"px"});
		width=this.$areaDom[id].outerWidth();
		height=this.$areaDom[id].outerHeight();
		this.$areaDom[id].children("bg").css({width:width-2+"px",height:height-2+"px"});
		this.$areaData[id].width=width;
		this.$areaData[id].height=height;
		if(this.$editable){
			this.$areaData[id].alt=true;
		}
	},
	addArea:function(id,json){
		if(this.onItemAdd!=null&&!this.onItemAdd(id,"area",json))return;
		if(this.$undoStack&&this.$editable){
			this.pushOper("delArea",[id]);
		}
		this.$areaDom[id]=$("<div id='"+id+"' class='GooFlow_area area_"+json.color+"' style='top:"+json.top*this.$scale+"px;left:"+json.left*this.$scale+"px'><div class='bg' style='width:"+(json.width*this.$scale)-2+"px;height:"+(json.height*this.$scale)-2+"px'></div>"
		+"<label>"+json.name+"</label><i></i><div><div class='rs_bottom'></div><div class='rs_right'></div><div class='rs_rb'></div><div class='rs_close'></div></div></div>");
		this.$areaData[id]=json;
		this.$group.append(this.$areaDom[id]);
		if(this.$nowType!="group")	this.$areaDom[id].children("div:eq(1)").css("display","none");
		++this.$areaCount;
		if(this.$editable){
			this.$areaData[id].alt=true;
			if(this.$deletedItem[id])	delete this.$deletedItem[id];//在回退删除操作时,去掉该元素的删除记录
		}
	},
	//重构整个流程图设计器的宽高
	reinitSize:function(width,height){
		var w=(width||800)-2;
		var h=(height||500)-2;
		this.$bgDiv.css({height:h+"px",width:w+"px"});
		var headHeight=0,hack=10;
		if(this.$head!=null){
			headHeight=24;
			hack=7;
		}
		if(this.$tool!=null){
			this.$tool.css({height:h-headHeight-hack+"px"});
		}
		w-=39;
		h=h-headHeight-(this.$head!=null? 5:8);
		this.$workArea.parent().css({height:h+"px",width:w+"px"});
		this.$workArea.css({height:h*3+"px",width:w*3+"px"});
		if(GooFlow.prototype.useSVG==""){
			this.$draw.coordsize = w*3+","+h*3;
		}
		this.$draw.style.width = w*3 + "px";
		this.$draw.style.height = +h*3 + "px";
		if(this.$group==null){
			this.$group.css({height:h*3+"px",width:w*3+"px"});
		}
	},
	/*
	 * 专门负责导出流程图文件并让用户下载的扩展包方法，需要依赖:
	 * ../plugin/promise.min.js
	 * ../plugin/html2canvas.min.js
	 * ../plugin/canvg.js (当必须在IE11及以下版本的IE浏览器上运行时)
	 */
	exportDiagram : function(fileName) {
	    //0.添加临时元素
		var width = this.$workArea.width();
		var height = this.$workArea.height();
	    $("body").append('<div id="demo_export" style="position:absolute;top:0;left:0;z-index:-1;width:0px;height:0px;overflow:hidden">'
	        +'<div style="color:#15428B;position:absolute;left:0;right:0;width:'+width+'px;height:'+height+'px;overflow:hidden;float:none;" class="GooFlow GooFlow_work"></div>'
	        +'</div>');

	    //1.先COPY节点和区块的内容
	    var inner = this.$bgDiv.find(".GooFlow_work_inner");
	    var divCanvas = $("#demo_export").children("div:eq(0)");
	    //复制节点的内容
	    inner.children("div").each(function(i){
	        var item=$(this);
	        if(item.hasClass("GooFlow_item")){
	            item.clone().removeAttr("id").css("position","absolute").appendTo(divCanvas);
	        }else if(item.hasClass("GooFlow_work_group")){
	            item.clone().removeAttr("id").css("position","absolute")
	                .attr("xmlns",'http://www.w3.org/1999/xhtml').appendTo(divCanvas);
	        }
	    });
	    html2canvas(divCanvas[0], {
	        allowTaint: false, taintTest: false,
	        onrendered: function(canvas) {
	            //2.在回调方法中，COPY连线内容
	            //造出临时的IMAGE
	            var context = canvas.getContext('2d');//取得画布的2d绘图上下文
	            context.save();
	            var strSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="1160" height="507">'
	                +'<defs><style type="text/css">text{font-size:14px;line-height:1.42857143;'
	                +'font-family:"Microsoft Yahei", "Helvetica Neue", Helvetica, Hiragino Sans GB, WenQuanYi Micro Hei, Arial, sans-serif;'
	                +'}</style></defs>' + window.$("<svg>").append(window.$("#draw_" + svgId).clone()).html() +'</svg>'; //COPY连线内容
	            var image = null;
	            if(!!window.ActiveXObject || "ActiveXObject" in window){//当为IE11及以下版本浏览器时，使用Canvg第三方工具
	                image = document.createElement('canvas');
	                canvg(image, strSvg);
	            }else{
	                var image = new Image();
	                image.src='data:image/svg+xml,'+ encodeURIComponent(strSvg);
	            }
	            var tempFunc=function(){
	                context.drawImage(image, 0, 0);
	                //清除不需要的临时DOM
	                $("#demo_export").empty().remove();
	                try{
	                    var blob = canvas.msToBlob();
	                    navigator.msSaveBlob(blob, "prettyImage.png");
	                }
	                catch(e){
	                    //生成一个下载链接并点击
	                    var a = document.createElementNS("http://www.w3.org/1999/xhtml", "a")
	                    a.href = canvas.toDataURL('image/png');  //将画布内的信息导出为png图片数据
	                    a.download = fileName+".png";  //设定下载名称
	                    document.body.appendChild(a);
	                    a.click(); //点击触发下载
	                    document.body.removeChild(a);
	                }
	            }

	            if(image.complete|| (!!window.ActiveXObject || "ActiveXObject" in window)) { // 如果图片已经存在于浏览器缓存，直接调用回调函数
	                //console.log("image.complete|| IE11");
	                tempFunc();
	                return;// 直接返回，不用再处理onload事件
	            }
	            image.onload=function(){
	                //console.log("image.onload");
	                tempFunc();
	            };
	        },
	        width: width,
	        height: height
	    });
	},
	bigger : function() {
		var scaleCurrent = this.$scale;
		this.resetScale(scaleCurrent + 0.1);
	},
	smaller : function() {
		var scaleCurrent = this.$scale;
		this.resetScale(scaleCurrent - 0.1);
	},
	/**
	 * 重设整个工作区内容的显示缩放比例，从0.5至4倍
	 */
	resetScale:function(scale){
		if(!scale)	scale=1.0;
		else if(scale<0.5)	scale=0.5;
		else if(scale>4)	scale=4;
		if(scale==1.0){
			newSizeFlag = false;
		}
		//以上是固定死取值范围：不让用户缩放过大或过小，已免无意中影响的显示效果
		if(this.$scale==scale)	return;
		var oldS=this.$scale;
		this.$scale=scale;
		var factor = oldS/scale;//因数（旧缩放比例除以新缩放比例）,元素的现有值除以该因子，就能得到新的缩放后的值
        var W=0,H=0,P={};//宽、高、左及上的临时变量
		//TODO:开始正式的缩放（节点、连线、泳道块有宽高和定位，其它编辑工具元素则只有定位）（全部以左上角为原点）
        this.blurItem();
		//先缩放工作区
        W=this.$workArea.width()/factor;
        H=this.$workArea.height()/factor;
        this.$workArea.css({"height":H+"px","width":W+"px"});
        if(GooFlow.prototype.useSVG!=""){

        }else{
            this.$draw.coordsize = W+","+H;
		}
        this.$draw.style.width = W + "px";
        this.$draw.style.height = H + "px";
        if(this.$group!=null){
            this.$group.css({height:H+"px",width:W+"px"});
        }
        //缩放节点
        var isWebkit = navigator.userAgent.toLowerCase().indexOf('webkit') > -1;
        this.$workArea.children(".GooFlow_item").each(function(i){
            var This=$(this);
            P=This.position();
            This.css({ "left":P.left/factor+"px", "top":P.top/factor+"px" });
            This=This.children("table");
            W=This.width()/factor;
            H=This.height()/factor;
            This.css('height');
            This.css({ "width":W+"px", "height":H+"px" });
            var tmp=28*scale;
            This.find("td[class='ico']").css({width:tmp+"px"});
            var newSize= {};
            if(tmp<12&&isWebkit){
                newSize["width"]="18px";newSize["height"]="18px";
                newSize["font-size"]="18px";
                newSize["transform"]="scale("+(tmp/18)+")";
                newSize["margin"]=-((18-tmp)/2)+"px";
            }else{
                newSize["width"]=tmp+"px"; newSize["height"]=tmp+"px";
                newSize["font-size"]=tmp+"px";
                newSize["transform"]="none";
                newSize["margin"]="0px auto";
            }
            This.find("td[class='ico']").children("svg").css(newSize);
            newIcoSize = newSize;
            newSizeFlag = true;
            tmp=14*scale;
            if(This.parent().find(".span").length==1){
                This.parent().css("border-radius",W/2+"px");
                This=This.parent().find(".span");
                This.css({"font-size":tmp+"px"});
            }else{
                This=This.find("td:eq(1)");
                newSize={};
                if(tmp<12&&isWebkit){
                    newSize["font-size"]="14px";
                    newSize["transform"]="scale("+(tmp/14)+")";
                    var mW=(W/scale-18-(W-18*scale))/2;
                    var mH=(H/scale-H)/2;
                    newSize["margin"]=-mH+"px "+(-mW)+"px";
                }else{
                    newSize["transform"]="none";
                    newSize["font-size"]=tmp+"px";
                    newSize["margin"]="0px";
                }
                This.css(newSize);
            }
		});
        //缩放区域图
		var ifs=16*scale+2;
		if(this.$group!=null){
			 this.$group.children(".GooFlow_area").each(function(i){
				 var This=$(this);
				 P=This.position();
				 This.css({ "left":P.left/factor+"px", "top":P.top/factor+"px" });
				 This=This.children("div:eq(0)");
				 W=This.outerWidth()/factor;
				 H=This.outerHeight()/factor;
				 This.css({ "width":W+"px", "height":H+"px" });
				 This.next("label").css({
					 "font-size": 14*scale+"px",
					 "left": ifs+3+"px"
				 }).next("i").css({
					 "font-size": ifs-2+"px",
					 width:ifs+"px",
					 height:ifs+"px",
					 "line-height":ifs+"px"
				 });
			 });
		}
		//缩放连线
		for(var id in this.$lineDom){
            this.$draw.removeChild(this.$lineDom[id]);
            delete this.$lineDom[id];
		}
        for (var key in this.$lineData) {
            this.addLineDom(key, this.$lineData[key]);
        }
	},
	/**
	 *  打印预览或另存为PDF功能，需要依赖:
	 * ../plugin/printThis.js
	 */
	print : function(scale){
	    var max=this.suitSize();
	    if(!scale)  scale=1.0;
	    max.width+=20;max.height+=20;
	    var printDiv=this.$workArea.clone();
	    printDiv.css({
	        width:max.width+"px",height:max.height+"px"
	    });
	    printDiv.children(".GooFlow_work_group").css({width:max.width+"px",height:max.height+"px"});
	    printDiv.children("svg").css({width:max.width+"px",height:max.height+"px"});
	    printDiv.children(".GooFlow_work_vml").css({width:max.width+"px",height:max.height+"px"});
	    printDiv=printDiv.wrap("<div class='GooFlow GooFlow_work'></div>").parent();
	    if(GooFlow.prototype.color.font){
	        printDiv.css("color",GooFlow.prototype.color.font);
	    }
	    printDiv.css({"transform-origin": "top right", transform:"scale("+scale+")"}).printThis({debug:true,base:document.URL});
	    printDiv.remove();
	},
	 //仅供内部使用：计算流程图的实际宽高（单位像素）
	suitSize:function(){
        var maxW=0,maxH=0;
        for(var key in this.$nodeData){
            var item = this.$nodeData[key];
            if(maxW < item.width+item.left){
                maxW = item.width+item.left;
            }
            if(maxH < item.height+item.top){
                maxH = item.height+item.top;
            }
        }
        for(var key in this.$areaData){
            var item = this.$areaData[key];
            if(maxW < item.width+item.left){
                maxW = item.width+item.left;
            }
            if(maxH < item.height+item.top){
                maxH = item.height+item.top;
            }
        }
        for(var key in this.$lineData){
            var item = this.$lineData[key];
            if(item.M && item.type=="lt" && maxW < item.M ){
                maxW = M+4;
            }
            if(item.M && item.type=="tb" && maxH < item.M ){
                maxH = M+4;
            }
        }
        return {width:maxW,height:maxH}

	}
}
GooFlow.prototype.color = {
		// 没有效果
		main:"#00B4E1",
		node:"#A1DCEB",
		line:"#3366cc",
		lineMarked:"#222",
		lineSuccess: "green",
		mark:"#a9ffa9",
		mix:"#B6F700",
		font:"#15428B"
	};